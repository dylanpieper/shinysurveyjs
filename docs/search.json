[{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"dynamic-configuration-types","dir":"Articles","previous_headings":"","what":"Dynamic Configuration Types","title":"Dynamic Field Configuration","text":"package supports two main types dynamic configurations: Choice Configuration: Populate dropdown radio button choices Parameter Configuration: Validate use data URL query parameters features support: Dependent fields choices dynamically update based selections Automatic saving data survey database Flexible handling dropdown radio button options","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"basic-structure","dir":"Articles","previous_headings":"Dynamic Configuration Types","what":"Basic Structure","title":"Dynamic Field Configuration","text":"dynamic configuration specified dynamic_config parameter survey_single(). accepts list configuration objects.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"choice-configuration","dir":"Articles","previous_headings":"","what":"Choice Configuration","title":"Dynamic Field Configuration","text":"Imagine want develop R package feedback survey allows users select one packages dependent version number populated database table: configuration creates two dependent fields second field’s choices update based selection first field.","code":"dynamic_config = list(   list(     group_type = \"choice\",                   # Type of configuration     table_name = \"config_packages\",          # Database table to populate choices from     group_col = \"package\"                    # Column with the choices   ),   list(     group_type = \"choice\",                   # Type of configuration     table_name = \"config_packages_versions\", # Database table for dependent choices     parent_table_name = \"config_packages\",   # Parent table for dependency     parent_id_col = \"package_id\",            # Links to parent table     group_col = \"version\"                    # Column for dependent choices   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"parameter-configuration","dir":"Articles","previous_headings":"","what":"Parameter Configuration","title":"Dynamic Field Configuration","text":"Parameter configuration allows : Accept values URL parameters Store values hidden fields Look display text database tables","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"url-parameter-example","dir":"Articles","previous_headings":"Parameter Configuration","what":"URL Parameter Example","title":"Dynamic Field Configuration","text":"want publish link R package feedback form github profile, also want post bluesky possibly present posit::conf(2025). can use URL query track ’m receiving feedback . feature useful tracking individuals, groups, referral sources. also allows pipe data survey UI using hidden text field name.","code":"# URL: http://127.0.0.1:3838/?source=github  dynamic_config = list(   list(     group_type = \"param\",              # Type of configuration     table_name = \"config_source\",      # Database table with valid parameters      group_col = \"source\",              # Matches URL parameter name     display_col = \"display_text\"       # Optional: Show display text   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"parameter-dependencies","dir":"Articles","previous_headings":"Parameter Configuration","what":"Parameter Dependencies","title":"Dynamic Field Configuration","text":"dynamic field configuration can combined create complex field dependencies. example, can use URL query parameter select package name use choice populate dropdown radio button field versions released package.","code":"# URL: http://127.0.0.1:3838/?package=shinysurveyjs  dynamic_config = list(   list(     group_type = \"param\",                    # Type of configuration     table_name = \"config_packages\",          # Database table for parameter     group_col = \"package\"                    # Column to validate parameter   ),   list(     group_type = \"choice\",                   # Type of configuration     table_name = \"config_packages_versions\", # Database table for dependent choices     parent_table_name = \"config_packages\",   # Parent table for dependency     parent_id_col = \"package_id\",            # Links to parent table     group_col = \"version\"                    # Column for dependent choices   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"examples-package-feedback","dir":"Articles","previous_headings":"","what":"Examples: Package Feedback","title":"Dynamic Field Configuration","text":"Imagine want develop R package feedback survey allow users select one packages (parent) version number (dependent), populated database table, track referral source URL query. Consider database structure: Run following R code define JSON deploy example survey (e.g., http://127.0.0.1:3838/?source=github): However, upon reflection, present shinysurveyjs posit::conf(2025) audience knows nothing packages. address , can set survey track R package referral source using URL parameters allow users select version package database table. Run following R code define JSON deploy example survey (e.g., http://127.0.0.1:3838/?package=shinysurveyjs&source=posit):","code":"-- Create the packages configuration table CREATE TABLE config_packages (     package_id SERIAL PRIMARY KEY,     package VARCHAR(255) NOT NULL,     date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     UNIQUE(package) );  -- Create the package versions table with proper foreign key CREATE TABLE config_packages_versions (     version_id SERIAL PRIMARY KEY,     package_id INTEGER NOT NULL,     version VARCHAR(50) NOT NULL,     date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP,     FOREIGN KEY (package_id) REFERENCES config_packages(package_id),     UNIQUE(package_id, version) );  -- Create the source configuration table CREATE TABLE config_source (     id SERIAL PRIMARY KEY,     source VARCHAR(50) NOT NULL UNIQUE,     display_text VARCHAR(255) NOT NULL,     date_created TIMESTAMP DEFAULT CURRENT_TIMESTAMP );  -- Insert sample data for packages INSERT INTO config_packages (package) VALUES     ('batchLLM'),     ('shinysurveyjs');  -- Insert sample data for package versions INSERT INTO config_packages_versions (package_id, version) SELECT p.package_id, v.version FROM config_packages p CROSS JOIN (     VALUES          ('batchLLM', 'dev-github'),         ('batchLLM', 'CRAN-0.1.0'),         ('batchLLM', 'CRAN-0.2.0'),         ('shinysurveyjs', 'dev-github'),         ('shinysurveyjs', 'CRAN-0.1.0') ) AS v(package_name, version) WHERE p.package = v.package_name;  -- Insert sample data for source configuration INSERT INTO config_source (source, display_text) VALUES     ('github', 'GitHub'),     ('bluesky', 'BlueSky'),     ('posit', 'posit::conf(2025)'); survey <- list(   title = \"R Package Feedback\",   pages = list(     list(       name = \"feedback\",       elements = list(         list(           type = \"html\",           visibleIf = \"{source} notempty\",           html = \"Hi, thanks for visting this survey from <b>{source}<\/b>.\"         ),         list(           type = \"radiogroup\",           name = \"package\",           title = \"Select an R package:\",           isRequired = TRUE,           choices = list()         ),         list(           type = \"radiogroup\",           name = \"version\",           title = \"Select a version:\",           isRequired = TRUE,           visibleIf = \"{package} notempty\",           choices = list()         ),         list(           type = \"rating\",           name = \"rating\",           title = \"Please rate the shinysurveyjs 📦:\",           rateType = \"stars\",           rateMax = 5,           isRequired = TRUE         ),         list(           type = \"comment\",           name = \"feedback\",           visibleIf = \"{rating} notempty\",           title = \"Why did you rate it {rating} stars?\",           rows = 2         ),         list(           type = \"html\",           name = \"lowRatingMessage\",           visibleIf = \"{rating} <= 2\",           html = \"I am sorry you had a poor experience. Please reach me at <b>dylanpieper@gmail.com<\/b> so I can make it right.\"         ),         list(           type = \"text\",           name = \"source\",           visible = FALSE         )       )     )   ) )  survey_single(   list = survey,   theme = \"modern\",   theme_color = \"#00AD6E\",   theme_mode = \"dark\",   db_config = list(     host = Sys.getenv(\"HOST\"),     port = as.numeric(Sys.getenv(\"PORT\")),     db_name = Sys.getenv(\"DB_NAME\"),     user = Sys.getenv(\"USER\"),     password = Sys.getenv(\"PASSWORD\"),     write_table = Sys.getenv(\"WRITE_TABLE\"),     log_table = Sys.getenv(\"LOG_TABLE\")   ),   dynamic_config = list(     list(       group_type = \"choice\",       table_name = \"config_packages\",       group_col = \"package\"     ),     list(       group_type = \"choice\",       table_name = \"config_packages_versions\",        parent_table_name = \"config_packages\",       parent_id_col = \"package_id\",       group_col = \"version\"     ),     list(       group_type = \"param\",       table_name = \"config_source\",       group_col = \"source\",       display_col = \"display_text\"     )   ) ) survey <- list(   title = \"R Package Feedback\",   pages = list(     list(       name = \"feedback\",       elements = list(         list(           type = \"html\",           visibleIf = \"{source} notempty\",           html = \"Hi, thanks for visting this survey from <b>{source}<\/b>.\"         ),         list(           type = \"radiogroup\",            name = \"version\",           title = \"Select a version of {package} to rate:\",           isRequired = TRUE,           visibleIf = \"{package} notempty\",           choices = list()         ),         list(           type = \"rating\",           name = \"rating\",           title = \"Please rate the shinysurveyjs 📦:\",           rateType = \"stars\",           rateMax = 5,           isRequired = TRUE         ),         list(           type = \"comment\",           name = \"feedback\",           visibleIf = \"{rating} notempty\",           title = \"Why did you rate it {rating} stars?\",           rows = 2         ),         list(           type = \"html\",           name = \"lowRatingMessage\",           visibleIf = \"{rating} <= 2\",           html = \"I am sorry you had a poor experience. Please reach me at <b>dylanpieper@gmail.com<\/b> so I can make it right.\"         ),         list(           type = \"text\",           name = \"source\",           visible = FALSE         ),         list(           type = \"text\",           name = \"package\",           visible = FALSE         )       )     )   ) )  survey_single(   list = survey,   theme = \"modern\",   theme_color = \"#00AD6E\",   theme_mode = \"dark\",   db_config = list(     host = Sys.getenv(\"HOST\"),     port = as.numeric(Sys.getenv(\"PORT\")),     db_name = Sys.getenv(\"DB_NAME\"),     user = Sys.getenv(\"USER\"),     password = Sys.getenv(\"PASSWORD\"),     write_table = Sys.getenv(\"WRITE_TABLE\"),     log_table = Sys.getenv(\"LOG_TABLE\")   ),   dynamic_config = list(      list(        group_type = \"param\",        table_name = \"config_packages\",        group_col = \"package\"      ),      list(        group_type = \"choice\",         table_name = \"config_packages_versions\",        parent_table_name = \"config_packages\",        parent_id_col = \"package_id\",        group_col = \"version\"      ),      list(        group_type = \"param\",        table_name = \"config_source\",        group_col = \"source\",         display_col = \"display_text\"      )   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Pieper. Author, maintainer.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pieper D (2025). shinysurveyjs: Create Deploy Surveys Shiny. R package version 0.0.0.9000, https://dylanpieper.github.io/shinysurveyjs.","code":"@Manual{,   title = {shinysurveyjs: Create and Deploy Surveys in Shiny},   author = {Dylan Pieper},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://dylanpieper.github.io/shinysurveyjs}, }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"shinysurveyjsa-hex-logo-for-an-r-package-called-shinysurveyjs","dir":"","previous_headings":"","what":"Create and Deploy Surveys in Shiny","title":"Create and Deploy Surveys in Shiny","text":"goal package integrate flexible frontend SurveyJS library reactive backend Shiny interface PostgreSQL database create dynamic user experiences. Whether need simple feedback form complex survey system organization, package designed scale .","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"surveyjs","dir":"","previous_headings":"","what":"SurveyJS","title":"Create and Deploy Surveys in Shiny","text":"SurveyJS JavaScript library streamlines creation survey applications jQuery architecture. library offers visual editor allows developers design complex surveys drag--drop interface generate JSON object. JSON defines every survey element, including survey titles, descriptions, multi-page layouts, progress indicators, 20 different question types, input validation rules, conditional logic flows, field visibility controls. library’s strength lies backend-agnostic approach, supporting seamless integration various server technologies, client-side implementation handles advanced features like text piping minimal code. R applications, developers can easily incorporate SurveyJS parsing JSON either raw text string converting R list JSON format.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"basic-features","dir":"","previous_headings":"","what":"Basic Features","title":"Create and Deploy Surveys in Shiny","text":"Host single survey one app (multiple surveys coming soon…) Store data PostgreSQL database, including metadata duration load, complete, save survey; date created updated; Shiny session ID; IP address Change primary theme color select light dark themes Automatically save survey progress cookies resume later","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"advanced-features","dir":"","previous_headings":"","what":"Advanced Features","title":"Create and Deploy Surveys in Shiny","text":"Dynamically populate field choices (.e., response options) database table create dependent inputs (e.g., select package name filter available versions) support tracking via URL parameters (e.g., referral source; see vignette) Log app messages, warnings, errors Setup asynchronous future plan update database without interrupting survey","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create and Deploy Surveys in Shiny","text":"","code":"pak::pkg_install(\"dylanpieper/shinysurveyjs\")"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Create and Deploy Surveys in Shiny","text":"Imagine want develop survey shinysurveyjs package users rate let know feel work. can use following code design deploy idea. need PostgreSQL database Shiny server run app. package automatically creates updates survey app log tables.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"single-survey","dir":"","previous_headings":"Basic Usage","what":"Single Survey","title":"Create and Deploy Surveys in Shiny","text":"Define survey configuration JSON text string list host single survey. Data stored PostgreSQL database table hosted Supabase.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"json","dir":"","previous_headings":"Basic Usage > Single Survey","what":"JSON","title":"Create and Deploy Surveys in Shiny","text":"","code":"survey <- '{   \"title\": \"R Package Feedback\",   \"pages\": [     {       \"name\": \"feedback\",       \"elements\": [         list(           type = \"rating\",           name = \"rating\",           title = \"Please rate the shinysurveyjs 📦:\",           rateType = \"stars\",           rateMax = 5,           isRequired = TRUE         ),         {           \"type\": \"comment\",           \"name\": \"feedback\",           \"visibleIf\": \"{rating} notempty\",           \"title\": \"Why did you rate it {rating} stars?\",           \"rows\": 2         },         {           \"type\": \"html\",           \"name\": \"lowRatingMessage\",           \"visibleIf\": \"{rating} <= 2\",           \"html\": \"I am sorry you had a poor experience. Please reach me at <b>dylanpieper@gmail.com<\/b> so I can help make it right.\"         }       ]     }   ] }'  shinysurveyjs::survey_single(   json = survey,   theme = \"modern\",   theme_color = \"#00AD6E\",   theme_mode = \"dark\",   db_config = list(     host = Sys.getenv(\"HOST\"),                # aws-0-us-east-2.pooler.supabase.com     port = as.numeric(Sys.getenv(\"PORT\")),    # 5432     db_name = Sys.getenv(\"DB_NAME\"),          # postgres     user = Sys.getenv(\"USER\"),                # username     password = Sys.getenv(\"PASSWORD\"),        # password     write_table = Sys.getenv(\"WRITE_TABLE\"),  # survey_package_feedback     log_table = Sys.getenv(\"LOG_TABLE\")       # survey_app_logs   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"list","dir":"","previous_headings":"Basic Usage > Single Survey","what":"List","title":"Create and Deploy Surveys in Shiny","text":"default, database configuration looks environmental variables (e.g., Sys.getenv(\"PASSWORD\")) can loaded .env .yaml file secrets manager. Using encrypted secrets recommended production environments.","code":"survey <- list(   title = \"R Package Feedback\",   pages = list(     list(       name = \"feedback\",       elements = list(         list(           type = \"rating\",           name = \"rating\",           title = \"Please rate the shinysurveyjs 📦:\",           rateType = \"stars\",           rateMax = 5,           isRequired = TRUE         ),         list(           type = \"comment\",           name = \"feedback\",           visibleIf = \"{rating} notempty\",           title = \"Why did you rate it {rating} stars?\",           rows = 2         ),         list(           type = \"html\",           name = \"lowRatingMessage\",           visibleIf = \"{rating} <= 2\",           html = \"I am sorry you had a poor experience. Please reach me at <b>dylanpieper@gmail.com<\/b> so I can make it right.\"         )       )     )   ) )  shinysurveyjs::survey_single(   list = survey,   ... )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Create and Deploy Surveys in Shiny","text":"Add survey start end date controls limit access survey Enable one-time access tokens secure survey distribution (piggyback dynamic field config URL parameters turn access completion) Dynamically stage JSON objects database modify surveys using staging table Add mode URL parameter encryption Add asynchronous worker: Update staged JSON objects manage tokens Support multiple surveys JSON loaded database (survey_multi())","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 shinysurveyjs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Hex Color Brightness — adjust_hex","title":"Adjust Hex Color Brightness — adjust_hex","text":"Adjusts hex color's brightness specified percentage. Positive percentages lighten color (moving towards white), negative percentages darken (moving towards black).","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Hex Color Brightness — adjust_hex","text":"","code":"adjust_hex(hex, percent = 25)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Hex Color Brightness — adjust_hex","text":"hex character string representing hex color code (e.g., \"#FF0000\" \"FF0000\") percent Numeric value -100 100 adjustment percentage: positive values lighten, negative values darken (default: 25)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Hex Color Brightness — adjust_hex","text":"character string containing adjusted hex color code leading \"#\"","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Hex Color Brightness — adjust_hex","text":"","code":"# Lighten a color by 25% adjust_hex(\"#FF0000\", 25)    # Makes red lighter #> Error in adjust_hex(\"#FF0000\", 25): could not find function \"adjust_hex\"  # Darken a color by 30% adjust_hex(\"#00FF00\", -30)   # Makes green darker #> Error in adjust_hex(\"#00FF00\", -30): could not find function \"adjust_hex\"  # Lighten without leading \"#\" adjust_hex(\"0000FF\", 20)     # Makes blue lighter #> Error in adjust_hex(\"0000FF\", 20): could not find function \"adjust_hex\""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate relative luminance of a color — calculate_luminance","title":"Calculate relative luminance of a color — calculate_luminance","text":"Calculate relative luminance color","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate relative luminance of a color — calculate_luminance","text":"","code":"calculate_luminance(hex)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate relative luminance of a color — calculate_luminance","text":"hex Hex color code","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate relative luminance of a color — calculate_luminance","text":"Numeric value 0 1 representing relative luminance","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_dynamic_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Dynamic Fields for Survey — configure_dynamic_fields","title":"Configure Dynamic Fields for Survey — configure_dynamic_fields","text":"Configures dynamic fields based provided configuration, handling choices parameters. Supports parent-child relationships fields, optional display text choices, unique field validation. Sends formatted field configurations client via custom message.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_dynamic_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Dynamic Fields for Survey — configure_dynamic_fields","text":"","code":"configure_dynamic_fields(   dynamic_config,   config_list_reactive,   session,   logger,   write_table,   db_ops )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_dynamic_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Dynamic Fields for Survey — configure_dynamic_fields","text":"dynamic_config List configuration entries. entry must list containing: group_type: Character, either \"choice\", \"param\", \"unique\" group_col: Character, name column containing choices parent_table_name: (Optional) Character, name parent table parent_id_col: (Optional) Character, column name parent-child relationship display_col: (Optional) Character, column name containing display text unique validation: result: Character, either \"warn\" \"stop\" result_field: (Required warn) Character, field show warning config_list_reactive Reactive expression containing cached database tables session Shiny session object sending messages client logger Logger object recording operation results write_table Character, name table check unique values db_ops Database operations object contains methods reading tables.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_dynamic_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Dynamic Fields for Survey — configure_dynamic_fields","text":"Invisible NULL. function operates via side effects.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Shiny App Settings — configure_shiny","title":"Configure Shiny App Settings — configure_shiny","text":"Configure Shiny App Settings","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Shiny App Settings — configure_shiny","text":"","code":"configure_shiny(..., type_handlers = list())"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Shiny App Settings — configure_shiny","text":"... Named arguments corresponding Shiny options. Names prefixed 'shiny.' type_handlers Named list functions process specific options. Default handlers provided numeric, logical, character values.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Shiny App Settings — configure_shiny","text":"NULL (invisibly). Sets global options Shiny.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Shiny App Settings — configure_shiny","text":"","code":"if (FALSE) { # \\dontrun{ configure_shiny(   host = \"0.0.0.0\",   port = 3838,   sanitize_errors = TRUE,   autoreload = FALSE ) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Database Operations Class — db_ops","title":"Database Operations Class — db_ops","text":"R6 Class managing database operations related survey data storage retrieval using PostgreSQL. Includes automatic tracking creation date, update date, session ID, IP address.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Database Operations Class — db_ops","text":"class handles database interactions survey data, including: Table creation modification tracking columns Data insertion automatic timestamp management Session IP tracking Transaction management Error handling logging Tracking columns automatically added table: date_created: Timestamp record created date_updated: Timestamp record last updated session_id: Shiny session identifier ip_address: Client IP address","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Database Operations Class — db_ops","text":"session_id Unique identifier current session pool Database connection pool logger Logger instance tracking operations","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Database Operations Class — db_ops","text":"db_ops$new() db_ops$operate() db_ops$ensure_tracking_columns() db_ops$create_survey_table() db_ops$update_survey_table() db_ops$read_table() db_ops$update_by_id() db_ops$get_client_ip() db_ops$clone()","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Database Operations Class — db_ops","text":"Create new Database Operations instance","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$new(pool, session_id, logger)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"pool Pool object. Database connection pool session_id Character. Unique identifier current session logger survey_logger object. Logger instance tracking operations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-operate-","dir":"Reference","previous_headings":"","what":"Method operate()","title":"Database Operations Class — db_ops","text":"Execute database operation transaction handling","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$operate(operation, error_message)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"operation Function. database operation execute error_message Character. Message display operation fails","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Result operation error message failed","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-ensure-tracking-columns-","dir":"Reference","previous_headings":"","what":"Method ensure_tracking_columns()","title":"Database Operations Class — db_ops","text":"Ensure tracking columns exist table","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$ensure_tracking_columns(table_name)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"table_name Character. Name table check/modify","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Invisible NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-create-survey-table-","dir":"Reference","previous_headings":"","what":"Method create_survey_table()","title":"Database Operations Class — db_ops","text":"Create new survey data table tracking columns","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$create_survey_table(write_table, data)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"write_table Character. Name table create data data.frame. Data frame containing schema new table","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Character. sanitized table name Update existing survey table new data","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$update_survey_table(write_table, data)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"write_table Character. Name table update data data.frame. Data frame containing new data","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Character. sanitized table name","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-read-table-","dir":"Reference","previous_headings":"","what":"Method read_table()","title":"Database Operations Class — db_ops","text":"Read data survey table optional filtering","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$read_table(   table_name,   columns = NULL,   filters = NULL,   order_by = NULL,   desc = FALSE,   limit = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"table_name Character. Name table read columns Character vector. Specific columns read (NULL columns) filters List. Named list filter conditions (e.g., list(status = \"active\")) order_by Character vector. Columns order desc Logical. TRUE, sort descending order limit Numeric. Maximum number rows return (NULL rows)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"data.frame. requested data","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-update-by-id-","dir":"Reference","previous_headings":"","what":"Method update_by_id()","title":"Database Operations Class — db_ops","text":"Update specific columns table given row ID","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$update_by_id(table_name, id, values)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"table_name Character. Name table update id Numeric. Row ID update values List. Named list column-value pairs update","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Invisible(NULL) Get Client IP Address","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-get-client-ip-","dir":"Reference","previous_headings":"","what":"Method get_client_ip()","title":"Database Operations Class — db_ops","text":"Retrieves client IP address HTTP request headers order preference. method checks multiple headers handle scenarios involving proxies load balancers.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$get_client_ip()"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Database Operations Class — db_ops","text":"method checks following headers order: X-Real-IP X-Forwarded-(takes first IP multiple present) REMOTE_ADDR IP address found header, returns \"0.0.0.0\" fallback.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Character string containing client IP address. Returns \"0.0.0.0\" IP address can determined.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Database Operations Class — db_ops","text":"","code":"\\dontrun{ # Inside a Shiny server function server <- function(input, output, session) {   db_ops <- db_ops$new(pool, session$token, logger)   client_ip <- db_ops$get_client_ip() } }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Database Operations Class — db_ops","text":"objects class cloneable method.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$clone(deep = FALSE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"deep Whether make deep clone.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Database Operations Class — db_ops","text":"","code":"## ------------------------------------------------ ## Method `db_ops$get_client_ip` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Inside a Shiny server function server <- function(input, output, session) {   db_ops <- db_ops$new(pool, session$token, logger)   client_ip <- db_ops$get_client_ip() } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Close Database Pool — db_pool_close","title":"Close Database Pool — db_pool_close","text":"Closes database connection pool performs cleanup operations application shutting . function ensures proper resource management closing open connections removing pool object global environment.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close Database Pool — db_pool_close","text":"","code":"db_pool_close(session)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close Database Pool — db_pool_close","text":"session Shiny session object represents current user session. used register cleanup operation.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Close Database Pool — db_pool_close","text":"function performs following operations: Registers cleanup handler using shiny::onStop Checks existence 'app_pool' global environment Calls cleanup_pool() existing pool found Removes pool object global environment","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Close Database Pool — db_pool_close","text":"function assumes existence cleanup_pool() function database pool stored global environment 'app_pool'.","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close Database Pool — db_pool_close","text":"","code":"if (FALSE) { # \\dontrun{ # In your Shiny server function function(input, output, session) {   db_pool_close(session) } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Database Pool — db_pool_open","title":"Open Database Pool — db_pool_open","text":"Creates manages global database pool connection using PostgreSQL.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Database Pool — db_pool_open","text":"","code":"db_pool_open(   host = NULL,   port = NULL,   db_name = NULL,   user = NULL,   password = NULL,   min_size = 1,   max_size = Inf )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Database Pool — db_pool_open","text":"host Database host port Database port db_name Database name user Database username password Database password min_size Minimum pool size (default: 1) max_size Maximum pool size (default: Inf)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Database Pool — db_pool_open","text":"database pool object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Choices for JavaScript Survey Library — format_choices_for_js","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"Formats R choice data structures format compatible JavaScript survey components. Handles flat lists choices hierarchical choice structures, support parent-child relationships fields.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"","code":"format_choices_for_js(   choices,   is_parent = FALSE,   child_field = NULL,   is_child = FALSE,   parent_field = NULL,   display_col = NULL,   is_param_parent = FALSE,   choice_ids = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"choices Either vector choices list hierarchical choices is_parent Logical, whether field parent field child_field Character, name field containing child choices is_child Logical, whether field contains child choices parent_field Character, name field containing parent choices display_col Character, optional name column containing display text is_param_parent Logical, whether parameter parent field choice_ids Vector, optional IDs associate choices","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"list formatted JavaScript survey components containing: type: Type field (\"parent\", \"param_parent\", \"child\", \"standalone\") choices: List formatted choices value, text, relationship data Additional metadata fields depending relationship type","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"","code":"if (FALSE) { # \\dontrun{ # Parent choices choices <- c(\"parent1\", \"parent2\") formatted <- format_choices_for_js(choices, is_parent = TRUE, child_field = \"child_field\")  # Child choices with parent IDs child_choices <- list(   list(value = \"child1\", text = \"Child 1\", parentId = 1, parentValue = \"parent1\"),   list(value = \"child2\", text = \"Child 2\", parentId = 1, parentValue = \"parent1\") ) formatted_children <- format_choices_for_js(   child_choices,   is_child = TRUE,   parent_field = \"parent_field\" ) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/generate_survey_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Complete Survey Theme — generate_survey_theme","title":"Generate Complete Survey Theme — generate_survey_theme","text":"Creates comprehensive theme including CSS variables complete styling survey components.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/generate_survey_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Complete Survey Theme — generate_survey_theme","text":"","code":"generate_survey_theme(   theme = \"defaultV2\",   primary = \"#003594\",   primary_foreground = NULL,   mode = \"light\",   custom_css = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/generate_survey_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Complete Survey Theme — generate_survey_theme","text":"theme Character string specifying \"defaultV2\" \"modern\" theme primary Character string specifying primary color hex format primary_foreground Character string specifying text color primary elements (optional) mode Character string specifying \"light\" \"dark\" mode custom_css Optional custom CSS append theme","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/generate_survey_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Complete Survey Theme — generate_survey_theme","text":"character string containing complete CSS survey styling","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_button_text_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate button text color based on background — get_button_text_color","title":"Generate button text color based on background — get_button_text_color","text":"Generate button text color based background","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_button_text_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate button text color based on background — get_button_text_color","text":"","code":"get_button_text_color(primary_hex, primary_foreground = NULL)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_button_text_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate button text color based on background — get_button_text_color","text":"primary_hex Primary color hex code primary_foreground Optional override text color","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_button_text_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate button text color based on background — get_button_text_color","text":"Hex color code button text","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_contrast_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Get contrasting text color — get_contrast_color","title":"Get contrasting text color — get_contrast_color","text":"Get contrasting text color","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_contrast_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get contrasting text color — get_contrast_color","text":"","code":"get_contrast_color(background_hex)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_contrast_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get contrasting text color — get_contrast_color","text":"background_hex Background hex color code","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_contrast_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get contrasting text color — get_contrast_color","text":"Hex color code text (\"#000000\" dark text \"#ffffff\" light text)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_datatable_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Style DataTable Based on Theme Mode — get_datatable_theme","title":"Style DataTable Based on Theme Mode — get_datatable_theme","text":"Creates consistent styling configuration DataTables matches application's theme mode (light/dark) color scheme.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_datatable_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Style DataTable Based on Theme Mode — get_datatable_theme","text":"","code":"get_datatable_theme(   mode = \"light\",   theme_color = \"#003594\",   container_bg = NULL,   text_color = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_datatable_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Style DataTable Based on Theme Mode — get_datatable_theme","text":"mode Character string specifying \"light\" \"dark\" mode theme_color Hex color code primary theme color container_bg Background color container (optional) text_color Text color (optional)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_datatable_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Style DataTable Based on Theme Mode — get_datatable_theme","text":"List DT options callback functions table styling","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_datatable_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Style DataTable Based on Theme Mode — get_datatable_theme","text":"","code":"# Light mode table DT::datatable(data, options = get_datatable_theme()$options) #> Error in get_datatable_theme(): could not find function \"get_datatable_theme\"  # Dark mode table DT::datatable(data, options = get_datatable_theme(\"dark\", \"#003594\")$options) #> Error in get_datatable_theme(\"dark\", \"#003594\"): could not find function \"get_datatable_theme\""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_source_display_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Display Text for Source Parameters — get_source_display_text","title":"Get Display Text for Source Parameters — get_source_display_text","text":"Looks display text config source table based source value. match found, returns original value.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_source_display_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Display Text for Source Parameters — get_source_display_text","text":"","code":"get_source_display_text(source_value, config_source_df)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_source_display_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Display Text for Source Parameters — get_source_display_text","text":"source_value Character. source identifier (e.g., \"GITHUB\", \"CRAN\") config_source_df Data frame. Configuration table containing source mappings columns 'source' 'display_text'","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_source_display_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Display Text for Source Parameters — get_source_display_text","text":"Character. display text corresponding source value","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_unique_field_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Existing Values for Unique Fields — get_unique_field_values","title":"Get Existing Values for Unique Fields — get_unique_field_values","text":"Retrieves existing values database fields require uniqueness validation","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_unique_field_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Existing Values for Unique Fields — get_unique_field_values","text":"","code":"get_unique_field_values(dynamic_config, db_ops, write_table)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_unique_field_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Existing Values for Unique Fields — get_unique_field_values","text":"dynamic_config List configuration entries db_ops Database operations object contains methods reading tables write_table Table name check","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_unique_field_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Existing Values for Unique Fields — get_unique_field_values","text":"List unique field values field name","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert hex color to RGB values — hex_to_rgb","title":"Convert hex color to RGB values — hex_to_rgb","text":"Convert hex color RGB values","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert hex color to RGB values — hex_to_rgb","text":"","code":"hex_to_rgb(hex)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert hex color to RGB values — hex_to_rgb","text":"hex Hex color code","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert hex color to RGB values — hex_to_rgb","text":"Numeric vector RGB values","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hide_and_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch Visibility Between Two Elements — hide_and_show","title":"Switch Visibility Between Two Elements — hide_and_show","text":"Shows one element hiding another. Simple toggle two DIV elements without animations.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hide_and_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch Visibility Between Two Elements — hide_and_show","text":"","code":"hide_and_show(hide_id, show_id)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hide_and_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch Visibility Between Two Elements — hide_and_show","text":"hide_id Character string specifying ID element hide show_id Character string specifying ID element show","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/is_light_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if a color is light or dark — is_light_color","title":"Determine if a color is light or dark — is_light_color","text":"Determine color light dark","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/is_light_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if a color is light or dark — is_light_color","text":"","code":"is_light_color(hex, threshold = 0.35)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/is_light_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if a color is light or dark — is_light_color","text":"hex Hex color code threshold Luminance threshold (default: 0.179, based WCAG guidelines)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/is_light_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if a color is light or dark — is_light_color","text":"Boolean indicating color light (TRUE) dark (FALSE)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/normalize_field_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize field value for comparison — normalize_field_value","title":"Normalize field value for comparison — normalize_field_value","text":"Normalizes field values consistent comparison : Converting lowercase Trimming whitespace Removing multiple spaces Removing special characters (optional)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/normalize_field_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize field value for comparison — normalize_field_value","text":"","code":"normalize_field_value(value, remove_special = TRUE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/normalize_field_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize field value for comparison — normalize_field_value","text":"value Character value normalize remove_special Logical. Whether remove special characters","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/normalize_field_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize field value for comparison — normalize_field_value","text":"Normalized character value","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse URL Query Parameters — parse_query","title":"Parse URL Query Parameters — parse_query","text":"Extracts query parameters either URL string Shiny session object returns named list. function handles URL encoding, empty values, multiple parameters name.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse URL Query Parameters — parse_query","text":"","code":"parse_query(input)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse URL Query Parameters — parse_query","text":"input Either character string containing URL query parameters, Shiny session object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse URL Query Parameters — parse_query","text":"named list names parameter names values parameter values","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse URL Query Parameters — parse_query","text":"","code":"# From URL string parse_query(\"https://example.com/page?name=John&age=25\") #> Error in parse_query(\"https://example.com/page?name=John&age=25\"): could not find function \"parse_query\"  # From Shiny session (within Shiny server function) server <- function(input, output, session) {   params <- parse_query(session) }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Cache Tables for Dynamic Fields — read_and_cache","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"Creates cache database tables efficient access. Tables read database stored list.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"","code":"read_and_cache(db_ops, dynamic_config)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"db_ops Database operations object contains methods reading tables. Must read_table method accepts table name parameter. dynamic_config List table configurations. configuration must list containing least table_name field specifying table read.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"named list cached tables. Access individual tables using tables$table_name.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"","code":"if (FALSE) { # \\dontrun{ # Define dynamic fields configuration config <- list(   list(     group_type = \"choice\",     table_name = \"config_packages\",     group_col = \"package\"   ),   list(     group_type = \"param\",     table_name = \"config_source\",     group_col = \"source\",     display_col = \"display_text\"   ) ) tables <- read_and_cache(db_ops, config)  # Access cached table output$packageTable <- renderTable({   tables$config_packages }) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_asset.html","id":null,"dir":"Reference","previous_headings":"","what":"Read Asset Files — read_asset","title":"Read Asset Files — read_asset","text":"Reads JavaScript CSS files.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_asset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read Asset Files — read_asset","text":"","code":"read_asset(filepath)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_asset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read Asset Files — read_asset","text":"filepath Character string. Path file read.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_asset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read Asset Files — read_asset","text":"character string containing file contents.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_asset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read Asset Files — read_asset","text":"function handles reading JavaScript CSS files, validating file exists correct extension reading.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_asset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read Asset Files — read_asset","text":"","code":"if (FALSE) { # \\dontrun{ # Read a JavaScript file js_content <- read_asset(\"path/to/script.js\")  # Read a CSS file css_content <- read_asset(\"path/to/styles.css\") } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Up Server Session Resources — server_clean","title":"Clean Up Server Session Resources — server_clean","text":"function handles cleanup tasks Shiny session ends. ensures proper resource disposal logging session end closing database connections.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Up Server Session Resources — server_clean","text":"","code":"server_clean(session, logger, zone = \"SURVEY\")"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Up Server Session Resources — server_clean","text":"session Shiny session object logger logger object log_message method recording events zone Character string specifying logging zone (default: \"SURVEY\")","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Up Server Session Resources — server_clean","text":"None (called side effects)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean Up Server Session Resources — server_clean","text":"function performs following cleanup tasks: Logs session end event Closes open database pool connections function called within server function Shiny application ensure proper resource management.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Up Server Session Resources — server_clean","text":"","code":"if (FALSE) { # \\dontrun{ server <- function(input, output, session) {   # Setup logger   logger <- LoggerFactory$new()    # Register cleanup   server_clean(session, logger) } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey Response Table Output — server_response","title":"Create Survey Response Table Output — server_response","text":"function sets server-side logic displaying survey response data table Shiny application. handles rendering response table, controls visibility, applies theming based light/dark mode.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey Response Table Output — server_response","text":"","code":"server_response(   output,   rv,   show_response = TRUE,   theme_mode = \"light\",   theme_color = \"#003594\" )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey Response Table Output — server_response","text":"output Shiny output object rv reactive values object containing: survey_completed - Boolean indicating survey completed loading - Boolean indicating loading state survey_responses - Data frame survey responses error_message - String containing error message show_response Boolean indicating whether show response table theme_mode Character string specifying theme mode (\"light\" \"dark\") theme_color Character string specifying primary theme color (hex code)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Survey Response Table Output — server_response","text":"None (called side effects)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Survey Response Table Output — server_response","text":"function creates two reactive outputs: surveyResponseTable - DataTable showing survey responses themed styling showResponseTable - Controls visibility response table table shown : survey completed Data loading error messages show_response parameter TRUE function applies different color schemes based theme_mode: Light mode: White background dark text subtle borders Dark mode: Dark background light text contrasting borders","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Survey Response Table Output — server_response","text":"","code":"if (FALSE) { # \\dontrun{ server <- function(input, output, session) {   rv <- reactiveValues(     survey_completed = FALSE,     loading = FALSE,     survey_responses = data.frame(),     error_message = NULL   )    server_response(     output,     rv,     show_response = TRUE,     theme_mode = \"light\",     theme_color = \"#003594\"   ) } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Server Components for Survey Application — server_setup","title":"Setup Server Components for Survey Application — server_setup","text":"Setup server-side components survey application setting logging database operations parent environment. Creates new logger instance attempts establish database operations, error handling database initialization failures.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Server Components for Survey Application — server_setup","text":"","code":"server_setup(   session,   db_config,   app_pool,   survey_logger,   db_ops,   suppress_logs )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Server Components for Survey Application — server_setup","text":"session Shiny session object containing session token db_config list containing database configuration elements: log_table: Name logging table database write_table: Name survey table database app_pool database connection pool object global environment survey_logger reference class object logging functionality db_ops reference class object database operations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Server Components for Survey Application — server_setup","text":"function creates two objects parent environment: logger: initialized survey logger object db_ops: initialized database operations object (NULL initialization failed)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Server Components for Survey Application — server_setup","text":"","code":"if (FALSE) { # \\dontrun{ server_setup(   session = session,   db_config = db_config,   app_pool = app_pool,   survey_logger = survey_logger,   db_ops = db_ops ) # After running, 'logger' and 'db_ops' are available in the parent environment } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_css.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Survey CSS with Theme Support — survey_css","title":"Generate Survey CSS with Theme Support — survey_css","text":"Creates CSS code styling survey components support light dark themes. function generates CSS variables styles various survey components including buttons, inputs, questions, navigation elements.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_css.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Survey CSS with Theme Support — survey_css","text":"","code":"survey_css(   primary = \"#003594\",   primary_foreground = \"#ffffff\",   mode = \"light\",   css_string = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_css.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Survey CSS with Theme Support — survey_css","text":"primary Character string specifying primary color hex format. color used buttons, selected states, interactive elements. Default \"#003594\". primary_foreground Character string specifying text color primary elements hex format. provide sufficient contrast primary color. Default \"#ffffff\". mode Character string specifying color theme. Must either \"light\" \"dark\". Default \"light\". css_string Optional character string containing custom CSS. provided, function returns string instead generating new CSS. Default NULL.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_css.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Survey CSS with Theme Support — survey_css","text":"character string containing complete CSS code survey styling.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_css.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Survey CSS with Theme Support — survey_css","text":"function generates CSS includes: Root CSS variables colors themes Component-specific styles questions, inputs, buttons Theme-specific color variables light dark modes Interactive states (hover, focus, disabled) Special styling navigation completion buttons CSS structured using CSS variables (custom properties) maintain consistency enable dynamic theme switching.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_css.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Survey CSS with Theme Support — survey_css","text":"","code":"# Generate default light theme CSS css <- survey_css() #> Error in survey_css(): could not find function \"survey_css\"  # Generate dark theme CSS dark_css <- survey_css(mode = \"dark\") #> Error in survey_css(mode = \"dark\"): could not find function \"survey_css\"  # Custom primary color with dark theme custom_css <- survey_css(   primary = \"#FF0000\",   primary_foreground = \"#FFFFFF\",   mode = \"dark\" ) #> Error in survey_css(primary = \"#FF0000\", primary_foreground = \"#FFFFFF\",     mode = \"dark\"): could not find function \"survey_css\""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny App Logger Class — survey_logger","title":"Shiny App Logger Class — survey_logger","text":"R6 class provides asynchronous logging functionality shiny app messages.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Shiny App Logger Class — survey_logger","text":"R6 class object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shiny App Logger Class — survey_logger","text":"class handles asynchronous logging shiny app messages PostgreSQL database. uses connection pooling futures efficient database operations. class maintains single logging table per instance handles database connections internally.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"message-types","dir":"Reference","previous_headings":"","what":"Message Types","title":"Shiny App Logger Class — survey_logger","text":"logger supports different message types displayed distinct visual styles: INFO Regular informational messages (displayed green) WARN Warning messages (displayed yellow) ERROR Error messages (displayed red)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public Fields","title":"Shiny App Logger Class — survey_logger","text":"log_table character. Name database table logging session_id character. Unique identifier current session survey_name character. Name survey logged db_params list. Database connection parameters suppress_logs logical. Whether suppress logs console output","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Shiny App Logger Class — survey_logger","text":"initialize(log_table, session_id, survey_name, suppress_logs = FALSE) Creates new logger instance log_table character. Name logging table session_id character. Unique session identifier survey_name character. Name survey suppress_logs logical. Whether suppress console output db_config list. Optional database configuration parameters log_message(message, type = \"INFO\", zone = \"DEFAULT\") Logs message asynchronously appropriate visual styling message character. Message log type character. Type message (\"INFO\", \"WARN\", \"ERROR\") zone character. Zone identifier message categorization","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"public-fields-1","dir":"Reference","previous_headings":"","what":"Public fields","title":"Shiny App Logger Class — survey_logger","text":"log_table Name database table logging session_id Unique identifier current session survey_name Name survey logged db_params List database connection parameters suppress_logs Whether suppress console output","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Shiny App Logger Class — survey_logger","text":"survey_logger$new() survey_logger$log_message() survey_logger$clone()","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Shiny App Logger Class — survey_logger","text":"Initialize new survey logger instance","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class — survey_logger","text":"","code":"survey_logger$new(log_table, session_id, survey_name, suppress_logs = FALSE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class — survey_logger","text":"log_table character. Name logging table session_id character. Unique session identifier survey_name character. Name survey suppress_logs logical. Whether suppress console output","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-log-message-","dir":"Reference","previous_headings":"","what":"Method log_message()","title":"Shiny App Logger Class — survey_logger","text":"Log message asynchronously database appropriate visual styling","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class — survey_logger","text":"","code":"survey_logger$log_message(message, type = \"INFO\", zone = \"DEFAULT\")"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class — survey_logger","text":"message character. Message log type character. Type message (\"INFO\", \"WARN\", \"ERROR\") zone character. Zone identifier message categorization","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Shiny App Logger Class — survey_logger","text":"invisible(NULL)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Shiny App Logger Class — survey_logger","text":"objects class cloneable method.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class — survey_logger","text":"","code":"survey_logger$clone(deep = FALSE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class — survey_logger","text":"deep Whether make deep clone.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny App Logger Class — survey_logger","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize logger with console output logger <- survey_logger$new(   log_table = \"survey_app_logs\",   session_id = \"user123\",   survey_name = \"customer_feedback\" )  # Initialize logger without console output quiet_logger <- survey_logger$new(   log_table = \"survey_app_logs\",   session_id = \"user123\",   survey_name = \"customer_feedback\",   suppress_logs = TRUE )  # Log different types of messages logger$log_message(\"Survey started\", \"INFO\", \"initialization\") logger$log_message(\"Missing optional field\", \"WARN\", \"validation\") logger$log_message(\"Required field empty\", \"ERROR\", \"validation\") } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Global Survey Environment and Database Connection — survey_setup","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"Setup global survey environment creating database connections, environment variables, future asynchronous processing plan. function: Validates database configuration parameters Sets required environment variables already present Configures optional Shiny settings Establishes global database connection pool Sets asynchronous processing using future package OS-specific configuration","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"","code":"survey_setup(db_config, shiny_config = NULL, workers = 2L)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"db_config list containing database configuration parameters: host: Database host address port: Database port number db_name: Name database user: Database username password: Database password write_table: Name table write operations shiny_config Optional list Shiny configuration parameters passed configure_shiny function. provided, settings applied database initialization. workers Number workers parallel processing. Default 3.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"Invisibly returns database pool object. pool also assigned 'app_pool' global environment. Invisibly returns initialized database pool object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"function performs several initialization steps: Validates write_table parameter non-empty string Checks required database configuration fields Sets environment variables (HOST, PORT, DB_NAME, USER, PASSWORD) present Applies optional Shiny configuration Creates global database connection pool exist Initializes future package asynchronous operations based OS Environment variables set already exist, preserving existing configurations.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"database-pool","dir":"Reference","previous_headings":"","what":"Database Pool","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"database pool created using db_pool_open function stored global environment 'app_pool'. pool already exists, recreated.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"asynchronous-processing","dir":"Reference","previous_headings":"","what":"Asynchronous Processing","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"function detects operating system sets appropriate future plan: Windows: Uses multisession macOS: Uses multicore supported, falls back multisession Linux: Uses multicore supported, falls back multisession","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy a Single Survey Shiny Application — survey_single","title":"Deploy a Single Survey Shiny Application — survey_single","text":"Creates deploys Shiny application conducting single survey using SurveyJS (https://surveyjs.io) PostgreSQL database integration. application handles survey data collection asynchronous logging future plan.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy a Single Survey Shiny Application — survey_single","text":"","code":"survey_single(   json = NULL,   list = NULL,   show_response = FALSE,   theme = \"defaultV2\",   theme_color = \"#003594\",   theme_mode = \"light\",   shiny_config = list(host = \"0.0.0.0\", port = 3838),   db_config = list(host = Sys.getenv(\"HOST\"), port = as.numeric(Sys.getenv(\"PORT\")),     db_name = Sys.getenv(\"DB_NAME\"), user = Sys.getenv(\"USER\"), password =     Sys.getenv(\"PASSWORD\"), write_table = Sys.getenv(\"WRITE_TABLE\"), log_table =     Sys.getenv(\"LOG_TABLE\")),   dynamic_config = NULL,   cookie_expiration_days = 7,   custom_css = NULL,   suppress_logs = FALSE )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy a Single Survey Shiny Application — survey_single","text":"json String. JSON survey definition object. list List. Survey structure convert JSON. show_response Logical. Display responses data.table submission. Default: FALSE. theme String. SurveyJS theme, either \"defaultV2\" \"modern\". Default: \"defaultV2\". theme_color String. Hex color code primary theme customization. theme_mode String. Color mode, either \"light\" \"dark\". Default: \"light\". shiny_config List. Optional Shiny configuration parameters. db_config List. Database connection parameters. specified, values read environment variables: host: Database host (env: HOST) port: Database port (env: PORT) db_name: Database name (env: DB_NAME) user: Database username (env: USER) password: Database password (env: PASSWORD) write_table: Survey data table name (env: WRITE_TABLE) log_table: Log messages table name (env: LOG_TABLE) dynamic_config List. Configuration dynamic fields. Supports three types: cookie_expiration_days Numeric. Number days retain survey cookies. Default: 7. custom_css String. Custom CSS rules append theme. suppress_logs Logical. Suppress console log messages. Default: FALSE.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single.html","id":"choice-configuration","dir":"Reference","previous_headings":"","what":"Choice Configuration","title":"Deploy a Single Survey Shiny Application — survey_single","text":"Populates dropdown radio button choices database tables: * group_type: Set \"choice\" * table_name: Database table populate choices * group_col: Column containing choice text * display_col: Optional column display text","code":"For dependent fields: * `parent_table_name`: Parent table for dependency chain * `parent_id_col`: Column linking to parent table"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single.html","id":"parameter-configuration","dir":"Reference","previous_headings":"","what":"Parameter Configuration","title":"Deploy a Single Survey Shiny Application — survey_single","text":"Handles URL query parameters hidden fields: * group_type: Set \"param\" * table_name: Database table valid parameters * group_col: Column matching URL parameter name * display_col: Optional column display text","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single.html","id":"unique-value-configuration","dir":"Reference","previous_headings":"","what":"Unique Value Configuration","title":"Deploy a Single Survey Shiny Application — survey_single","text":"Validates unique entries existing database records: * group_type: Set \"unique\" * group_col: Column check uniqueness * result: Action duplicate (\"warn\" \"stop\") * result_field: Survey field warning message (hidden)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy a Single Survey Shiny Application — survey_single","text":"Shiny application object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy a Single Survey Shiny Application — survey_single","text":"","code":"if (FALSE) { # \\dontrun{ # Choice configuration example dynamic_config <- list(   list(     group_type = \"choice\",     table_name = \"packages\",     group_col = \"name\"   ) )  # Parameter configuration example dynamic_config <- list(   list(     group_type = \"param\",     table_name = \"sources\",     group_col = \"source\",     display_col = \"display_text\"   ) )  # Unique value configuration example dynamic_config <- list(   list(     group_type = \"unique\",     group_col = \"title\",     result = \"warn\",     result_field = \"warning_message\"   ) ) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"Creates consolidated JavaScript code bundle handling single survey functionality combining multiple JS components including configuration, cookie management, progress saving, Shiny integration, initialization, event handlers.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"","code":"survey_single_js(cookie_expiration_days = 7)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"cookie_expiration_days Numeric value specifying many days survey cookies persist user's browser. Must positive integer. Default 7 days.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"character string containing concatenated JavaScript code necessary components survey functionality.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"","code":"# Generate JavaScript with default 7-day cookie expiration js_code <- survey_single_js() #> Error in survey_single_js(): could not find function \"survey_single_js\"  # Generate JavaScript with 30-day cookie expiration js_code <- survey_single_js(cookie_expiration_days = 30) #> Error in survey_single_js(cookie_expiration_days = 30): could not find function \"survey_single_js\""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey UI with CSS and Message Components — survey_ui","title":"Create Survey UI with CSS and Message Components — survey_ui","text":"Create Survey UI CSS Message Components","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey UI with CSS and Message Components — survey_ui","text":"","code":"survey_ui(id, theme, primary, mode, cookie_expiration_days, custom_css)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey UI with CSS and Message Components — survey_ui","text":"id ID survey div container (e.g., \"surveyContainer\") theme Theme name (\"defaultV2\" \"modern\") primary Primary color hex code (optional) mode Color mode (\"light\" \"dark\") cookie_expiration_days Number days keep cookies survey data custom_css Optional custom CSS append theme","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Survey UI with CSS and Message Components — survey_ui","text":"tagList containing survey dependencies container","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey UI Wrapper — survey_ui_wrapper","title":"Create Survey UI Wrapper — survey_ui_wrapper","text":"Creates Shiny UI wrapper displaying survey optional response table. UI includes loading spinner conditional panels based survey state.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey UI Wrapper — survey_ui_wrapper","text":"","code":"survey_ui_wrapper(   id,   theme,   theme_color,   theme_mode,   cookie_expiration_days,   custom_css )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey UI Wrapper — survey_ui_wrapper","text":"id ID survey div container theme theme configuration styling survey theme_color Primary color used UI elements like loading spinner theme_mode theme mode (e.g., 'light' 'dark') cookie_expiration_days Number days keep cookies survey data custom_css Optional custom CSS append theme","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Survey UI Wrapper — survey_ui_wrapper","text":"Shiny UI definition","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/transform_validated_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Validated Parameters — transform_validated_params","title":"Transform Validated Parameters — transform_validated_params","text":"Transforms list validated parameters structured format text/value pairs, looking display text configuration tables applicable.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/transform_validated_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Validated Parameters — transform_validated_params","text":"","code":"transform_validated_params(validated_params, config_list)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/transform_validated_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Validated Parameters — transform_validated_params","text":"validated_params List. Input parameters format: list(param_name = \"value\") list(param_name = list(value = \"value\")) config_list List. Configuration data containing tables including: config_source: Data frame columns 'source' 'display_text' config_packages: Data frame package configurations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/transform_validated_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Validated Parameters — transform_validated_params","text":"List. Transformed parameters format: list(param_name = list(text = \"display_text\", value = \"value\"))","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Duration Save — update_duration_save","title":"Update Duration Save — update_duration_save","text":"Updates duration_save value specific survey response using provided database connection pool.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Duration Save — update_duration_save","text":"","code":"update_duration_save(db_ops, db_config, session_id, duration_save, logger)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Duration Save — update_duration_save","text":"db_ops Database operations object instance db_config List containing database configuration including: write_table: Table name survey data session_id Character string containing Shiny session token duration_save Numeric value duration save logger Logger object recording operations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Duration Save — update_duration_save","text":"NULL invisibly","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save_async.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Duration Save Asynchronously — update_duration_save_async","title":"Update Duration Save Asynchronously — update_duration_save_async","text":"Asynchronously updates duration_save value specific survey response using separate database pool future process. Asynchronously updates duration_save value specific survey response using separate database pool future process.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save_async.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Duration Save Asynchronously — update_duration_save_async","text":"","code":"update_duration_save_async(   db_ops,   db_config,   session_id,   duration_save,   logger )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save_async.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Duration Save Asynchronously — update_duration_save_async","text":"db_ops Current database operations instance initial row ID lookup db_config List containing database configuration including: host: Database host port: Database port db_name: Database name user: Database username password: Database password write_table: Table name survey data session_id Character string containing Shiny session token duration_save Numeric value duration save logger Logger object recording operations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save_async.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Duration Save Asynchronously — update_duration_save_async","text":"promise resolves update complete promise resolves update complete","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Dynamic Configuration — validate_dynamic_config","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"Validates structure content dynamic configuration list. Checks required fields present valid configuration entry. Logs validation results using provided survey logger. Validates structure content dynamic configuration list.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"","code":"validate_dynamic_config(   dynamic_config,   config_list = NULL,   survey_logger = NULL )  validate_dynamic_config(   dynamic_config,   config_list = NULL,   survey_logger = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"dynamic_config List configuration entries config_list Optional cached tables survey_logger Logger object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"List two elements: valid: Logical indicating configuration valid errors: Character vector error messages (empty valid) List validation results","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"","code":"if (FALSE) { # \\dontrun{ config <- list(   list(     table_name = \"config_packages\",     group_type = \"choice\",     group_col = \"package\"   ),   list(     table_name = \"config_pid\",     group_type = \"param\",     group_col = \"pid\",     display_col = \"full_name\"   ) )  # First cache the tables config_list <- read_and_cache(db_ops, config)  # Then validate using the cache result <- validate_dynamic_config(config, config_list, survey_logger) if (!result$valid) {   stop(paste(result$errors, collapse = \"\\n\")) } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_url_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate URL Parameters Against Config Tables — validate_url_parameters","title":"Validate URL Parameters Against Config Tables — validate_url_parameters","text":"Validates URL parameters cached configuration tables entries group_type = \"param\". Checks parameter values exist corresponding tables.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_url_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate URL Parameters Against Config Tables — validate_url_parameters","text":"","code":"validate_url_parameters(   dynamic_config,   config_list,   query_list,   survey_logger = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_url_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate URL Parameters Against Config Tables — validate_url_parameters","text":"dynamic_config List configuration entries config_list Cached tables read_and_cache query_list List URL parameters parse_query survey_logger Logger object recording validation results","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_url_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate URL Parameters Against Config Tables — validate_url_parameters","text":"List validation results: valid: Logical indicating parameters valid errors: Character vector error messages values: List validated parameter values","code":""}]
