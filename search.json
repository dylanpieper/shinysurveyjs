[{"path":"https://dylanpieper.github.io/shinysurveyjs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 shinysurveyjs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"choice-configuration","dir":"Articles","previous_headings":"","what":"Choice Configuration","title":"Dynamic Field Configuration","text":"Choice Configuration provides: Dependent fields dynamic updates based parent selections Flexible handling dropdown radio button options Support single multi-level dependencies","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"example","dir":"Articles","previous_headings":"Choice Configuration","what":"Example","title":"Dynamic Field Configuration","text":"Imagine want develop R package feedback survey allows users select one packages dependent version number populated database table: configuration creates two dependent fields second field’s choices update based selection first field.","code":"dynamic_config = list(   list(     config_type = \"choice\",                   # Type of configuration     table_name = \"config_packages\",           # Database table to populate choices from     config_col = \"package\"                    # Column with the choices   ),   list(     config_type = \"choice\",                   # Type of configuration      table_name = \"config_packages_versions\",  # Database table for dependent choices     parent_table_name = \"config_packages\",    # Parent table for dependency     parent_id_col = \"package_id\",             # Links to parent table     config_col = \"version\"                    # Column for dependent choices   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"parameter-configuration","dir":"Articles","previous_headings":"","what":"Parameter Configuration","title":"Dynamic Field Configuration","text":"Parameter Configuration provides: URL parameter validation database tables Optional display text mapping hidden field integration Accept values URL parameters Store values hidden fields Look display text database tables","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"example-1","dir":"Articles","previous_headings":"Parameter Configuration","what":"Example","title":"Dynamic Field Configuration","text":"Imagine want publish link R package feedback form github profile, also want post bluesky possibly present posit::conf(2025). can use URL query track ’m receiving feedback . feature useful tracking individuals, groups, referral sources. also allows pipe data survey UI using hidden text field name.","code":"# URL: http://127.0.0.1:3838/?source=github  dynamic_config = list(   list(     config_type = \"param\",              # Type of configuration     table_name = \"config_source\",       # Database table with valid parameters      config_col = \"source\",              # Matches URL parameter name     display_col = \"display_text\"        # Optional: Show display text   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"unique-value-configuration","dir":"Articles","previous_headings":"","what":"Unique Value Configuration","title":"Dynamic Field Configuration","text":"Unique Value Configuration provides: Text normalization comparison Configurable validation responses (warn stop) Custom warning error messages Integration form submission logic","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/articles/dynamic_field_config.html","id":"example-2","dir":"Articles","previous_headings":"Unique Value Configuration","what":"Example","title":"Dynamic Field Configuration","text":"Imagine want create different survey submit issues relate package prevent users submitting issue title already exists. (Yes, know never happen Github.) following configuration ensures package issue report unique title: configuration : Check entered issue title existing records database Display warning message (result = “warn”) Prevent form submission display error message (result = “stop”) validation normalizes text : Converting lowercase Trimming whitespace Removing special characters","code":"dynamic_config = list(   list(     config_type = \"unique\",           # Type of configuration     config_col = \"issue_title\",       # Column to check for uniqueness     result = \"stop\",                  # Action on duplicate (\"warn\" or \"stop\")     result_field = \"title_error\"      # Field for custom error message   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Pieper. Author, maintainer.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pieper D (2025). shinysurveyjs: Create Deploy Survey Applications. R package version 0.1.0, https://github.com/dylanpieper/shinysurveyjs, https://dylanpieper.github.io/shinysurveyjs.","code":"@Manual{,   title = {shinysurveyjs: Create and Deploy Survey Applications},   author = {Dylan Pieper},   year = {2025},   note = {R package version 0.1.0, https://github.com/dylanpieper/shinysurveyjs},   url = {https://dylanpieper.github.io/shinysurveyjs}, }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"shinysurveyjs","dir":"","previous_headings":"","what":"Create and Deploy Survey Applications","title":"Create and Deploy Survey Applications","text":"goal package integrate SurveyJS Shiny interface PostgreSQL database create dynamic user experiences.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"surveyjs","dir":"","previous_headings":"","what":"SurveyJS","title":"Create and Deploy Survey Applications","text":"SurveyJS JavaScript library streamlines creation survey applications jQuery architecture. library offers visual editor design complex surveys drag--drop interface generate JSON object. JSON defines every survey element, including title, description, logo, page layout well progress indicators, question types, validation rules, logic flows, visibility controls, text piping. library’s strength lies backend-agnostic approach, supporting integration server technology. R & Shiny applications, developers can parse JSON either raw text string converting list JSON format, gets passed front-end. LLMs great tool converting JSON object list.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"basic-features","dir":"","previous_headings":"","what":"Basic Features","title":"Create and Deploy Survey Applications","text":"Store data PostgreSQL database, including timing metadata (duration load, duration complete, duration save, date created, date updated) tracking metadata (Shiny session ID IP address) database tables app writes automatically created don’t already exist. Automatically save survey progress cookies resume later Change theme, primary color, contrast mode (light dark)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"advanced-features","dir":"","previous_headings":"","what":"Advanced Features","title":"Create and Deploy Survey Applications","text":"Dynamically populate field choices (.e., response options) database table create dependent inputs (e.g., select package name filter available versions) support tracking via URL parameters (e.g., referral source; see vignette) Log app messages, warnings, errors database table Use future update tables without interrupting survey","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create and Deploy Survey Applications","text":"","code":"pak::pkg_install(\"dylanpieper/shinysurveyjs\")"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"basic-usage","dir":"","previous_headings":"","what":"Basic Usage","title":"Create and Deploy Survey Applications","text":"Imagine want develop feedback survey package.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"single-survey","dir":"","previous_headings":"Basic Usage","what":"Single Survey","title":"Create and Deploy Survey Applications","text":"Let’s define survey list run survey() function. ’m using Supabase PostgreSQL database.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"json","dir":"","previous_headings":"Basic Usage > Single Survey","what":"JSON","title":"Create and Deploy Survey Applications","text":"default, database configuration looks environmental variables (e.g., Sys.getenv(\"PASSWORD\")) can loaded .Renviron preferred method handling environmental variables. Check complex gist form expressions text piping.","code":"survey <- list(   title = \"R Package Feedback\",   pages = list(     list(       name = \"page1\",       elements = list(         list(           type = \"matrix\",           name = \"rating\",           title = \"Please rate the shinysurveyjs 📦:\",           columns = list(             list(value = \"1\", text = \"Bad\"),             list(value = \"2\", text = \"Neutral\"),             list(value = \"3\", text = \"Good\")           ),           rows = list(             list(value = \"UI\", text = \"UI Design\"),             list(value = \"Server\", text = \"Server Functionality\")           )         ),         list(           type = \"comment\",           name = \"feedback\",           title = \"Any other feedback?\"         )       )     )   ) )  shinysurveyjs::survey(   list = survey,   db_config = list(     host = Sys.getenv(\"HOST\"),                # aws-0-us-east-2.pooler.supabase.com     port = as.numeric(Sys.getenv(\"PORT\")),    # 5432     db_name = Sys.getenv(\"DB_NAME\"),          # postgres     user = Sys.getenv(\"USER\"),                # username     password = Sys.getenv(\"PASSWORD\"),        # password     write_table = Sys.getenv(\"WRITE_TABLE\"),  # survey_package_feedback     log_table = Sys.getenv(\"LOG_TABLE\")       # survey_app_logs   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Hex Color Brightness — adjust_hex","title":"Adjust Hex Color Brightness — adjust_hex","text":"Adjusts brightness hex color code specified percentage. Positive percentages lighten color (towards white), negative percentages darken (towards black).","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Hex Color Brightness — adjust_hex","text":"","code":"adjust_hex(hex, percent = 25)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Hex Color Brightness — adjust_hex","text":"hex String. Hex color code, without leading \"#\" (e.g., \"#FF0000\" \"FF0000\"). percent Numeric. Adjustment percentage -100 100. Positive values lighten, negative values darken. Default: 25.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Hex Color Brightness — adjust_hex","text":"String. Adjusted hex color code leading \"#\".","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/adjust_hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Hex Color Brightness — adjust_hex","text":"","code":"# Lighten red by 25% adjust_hex(\"#FF0000\", 25) #> Error in adjust_hex(\"#FF0000\", 25): could not find function \"adjust_hex\"  # Darken green by 30% adjust_hex(\"#00FF00\", -30) #> Error in adjust_hex(\"#00FF00\", -30): could not find function \"adjust_hex\"  # Lighten blue by 20% (without leading \"#\") adjust_hex(\"0000FF\", 20) #> Error in adjust_hex(\"0000FF\", 20): could not find function \"adjust_hex\""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Relative Luminance From Color — calculate_luminance","title":"Calculate Relative Luminance From Color — calculate_luminance","text":"Calculates relative luminance color according WCAG 2.0 definition. Relative luminance represents relative brightness color 0 black 1 white.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Relative Luminance From Color — calculate_luminance","text":"","code":"calculate_luminance(hex)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Relative Luminance From Color — calculate_luminance","text":"hex String. Hex color code \"#RRGGBB\" format.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Relative Luminance From Color — calculate_luminance","text":"Numeric 0 1 representing relative luminance.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/calculate_luminance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Relative Luminance From Color — calculate_luminance","text":"WCAG 2.0: https://www.w3.org/TR/WCAG20/#relativeluminancedef","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_dynamic_fields.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Dynamic Fields for Survey — configure_dynamic_fields","title":"Configure Dynamic Fields for Survey — configure_dynamic_fields","text":"Configures dynamic fields survey based provided configuration parameters. Handles choice population database tables, parent-child field relationships, parameter-based field values, unique value validation. Sends formatted field configurations client via custom messages.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_dynamic_fields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Dynamic Fields for Survey — configure_dynamic_fields","text":"","code":"configure_dynamic_fields(   dynamic_config,   config_list_reactive,   session,   logger,   write_table,   db_ops )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_dynamic_fields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Dynamic Fields for Survey — configure_dynamic_fields","text":"dynamic_config List. Configuration entries, entry contains: config_type String. Field type: \"choice\", \"param\", \"unique\" config_col String. Column name containing choice values parent_table_name String. Optional parent table dependencies parent_id_col String. Optional column parent-child relationships display_col String. Optional column display text result String. unique validation: \"warn\" \"stop\" result_field String. Required warnings: field display message config_list_reactive Reactive. Contains cached database tables. session ShinySession. Session object client communication. logger Logger. Object operation logging. write_table String. Table name unique value validation. db_ops DBOps. Database operations object table reading methods.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_dynamic_fields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Dynamic Fields for Survey — configure_dynamic_fields","text":"Invisible NULL, called side effects.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Shiny App Settings — configure_shiny","title":"Configure Shiny App Settings — configure_shiny","text":"Sets global Shiny options automatically adding 'shiny.' prefix option names. Validates processes option values using type-specific handlers.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Shiny App Settings — configure_shiny","text":"","code":"configure_shiny(..., type_handlers = list())"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Shiny App Settings — configure_shiny","text":"... Named arguments passed Shiny options. Names prefixed 'shiny.'. type_handlers Named list functions option value processing. Default handlers provided : numeric: Validates numeric values logical: Converts TRUE/FALSE character: Processes string values","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Shiny App Settings — configure_shiny","text":"Invisible NULL. Modifies global Shiny options.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/configure_shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Shiny App Settings — configure_shiny","text":"","code":"if (FALSE) { # \\dontrun{ configure_shiny(   host = \"0.0.0.0\",   port = 3838,   sanitize_errors = TRUE,   autoreload = FALSE ) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Database Operations Class — db_ops","title":"Database Operations Class — db_ops","text":"R6 Class managing database operations related survey data storage retrieval using PostgreSQL. Includes automatic tracking creation date, update date, session ID, IP address.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Database Operations Class — db_ops","text":"class handles database interactions survey data, including: Table creation modification tracking columns Data insertion automatic timestamp management Session IP tracking Transaction management Error handling logging Tracking columns automatically added table: date_created: Timestamp record created date_updated: Timestamp record last updated session_id: Shiny session identifier ip_address: Client IP address","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Database Operations Class — db_ops","text":"session_id Unique identifier current session pool Database connection pool logger Logger instance tracking operations","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Database Operations Class — db_ops","text":"db_ops$new() db_ops$operate() db_ops$ensure_tracking_columns() db_ops$create_survey_table() db_ops$update_survey_table() db_ops$read_table() db_ops$update_by_id() db_ops$get_client_ip() db_ops$clone()","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Database Operations Class — db_ops","text":"Create new Database Operations instance","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$new(pool, session_id, logger)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"pool Pool object. Database connection pool session_id Character. Unique identifier current session logger survey_logger object. Logger instance tracking operations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-operate-","dir":"Reference","previous_headings":"","what":"Method operate()","title":"Database Operations Class — db_ops","text":"Execute database operation transaction handling","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$operate(operation, error_message)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"operation Function. database operation execute error_message Character. Message display operation fails","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Result operation error message failed","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-ensure-tracking-columns-","dir":"Reference","previous_headings":"","what":"Method ensure_tracking_columns()","title":"Database Operations Class — db_ops","text":"Ensure tracking columns exist table","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$ensure_tracking_columns(table_name)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"table_name Character. Name table check/modify","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Invisible NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-create-survey-table-","dir":"Reference","previous_headings":"","what":"Method create_survey_table()","title":"Database Operations Class — db_ops","text":"Create new survey data table tracking columns","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$create_survey_table(write_table, data)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"write_table Character. Name table create data data.frame. Data frame containing schema new table","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Character. sanitized table name Update existing survey table new data","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$update_survey_table(write_table, data)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"write_table Character. Name table update data data.frame. Data frame containing new data","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Character. sanitized table name","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-read-table-","dir":"Reference","previous_headings":"","what":"Method read_table()","title":"Database Operations Class — db_ops","text":"Read data survey table optional filtering","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$read_table(   table_name,   columns = NULL,   filters = NULL,   order_by = NULL,   desc = FALSE,   limit = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"table_name Character. Name table read columns Character vector. Specific columns read (NULL columns) filters List. Named list filter conditions (e.g., list(status = \"active\")) order_by Character vector. Columns order desc Logical. TRUE, sort descending order limit Numeric. Maximum number rows return (NULL rows)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"data.frame. requested data","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-update-by-id-","dir":"Reference","previous_headings":"","what":"Method update_by_id()","title":"Database Operations Class — db_ops","text":"Update specific columns table given row ID","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$update_by_id(table_name, id, values)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"table_name Character. Name table update id Numeric. Row ID update values List. Named list column-value pairs update","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Invisible(NULL) Get Client IP Address","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-get-client-ip-","dir":"Reference","previous_headings":"","what":"Method get_client_ip()","title":"Database Operations Class — db_ops","text":"Retrieves client IP address HTTP request headers order preference. method checks multiple headers handle scenarios involving proxies load balancers.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$get_client_ip()"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"Database Operations Class — db_ops","text":"method checks following headers order: X-Real-IP X-Forwarded-(takes first IP multiple present) REMOTE_ADDR IP address found header, returns \"0.0.0.0\" fallback.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class — db_ops","text":"Character string containing client IP address. Returns \"0.0.0.0\" IP address can determined.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Database Operations Class — db_ops","text":"","code":"\\dontrun{ # Inside a Shiny server function server <- function(input, output, session) {   db_ops <- db_ops$new(pool, session$token, logger)   client_ip <- db_ops$get_client_ip() } }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Database Operations Class — db_ops","text":"objects class cloneable method.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class — db_ops","text":"","code":"db_ops$clone(deep = FALSE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class — db_ops","text":"deep Whether make deep clone.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Database Operations Class — db_ops","text":"","code":"## ------------------------------------------------ ## Method `db_ops$get_client_ip` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # Inside a Shiny server function server <- function(input, output, session) {   db_ops <- db_ops$new(pool, session$token, logger)   client_ip <- db_ops$get_client_ip() } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Close Database Pool — db_pool_close","title":"Close Database Pool — db_pool_close","text":"Closes database connection pool performs cleanup operations application shutting . function ensures proper resource management closing open connections removing pool object global environment.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close Database Pool — db_pool_close","text":"","code":"db_pool_close(session)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close Database Pool — db_pool_close","text":"session Shiny session object represents current user session. used register cleanup operation.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Close Database Pool — db_pool_close","text":"function performs following operations: Registers cleanup handler using shiny::onStop Checks existence 'app_pool' global environment Calls cleanup_pool() existing pool found Removes pool object global environment","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Close Database Pool — db_pool_close","text":"function assumes existence cleanup_pool() function database pool stored global environment 'app_pool'.","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_close.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Close Database Pool — db_pool_close","text":"","code":"if (FALSE) { # \\dontrun{ # In your Shiny server function function(input, output, session) {   db_pool_close(session) } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Database Pool — db_pool_open","title":"Open Database Pool — db_pool_open","text":"Creates manages global database pool connection using PostgreSQL.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Database Pool — db_pool_open","text":"","code":"db_pool_open(   host = NULL,   port = NULL,   db_name = NULL,   user = NULL,   password = NULL,   min_size = 1,   max_size = Inf )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Database Pool — db_pool_open","text":"host Database host port Database port db_name Database name user Database username password Database password min_size Minimum pool size (default: 1) max_size Maximum pool size (default: Inf)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_pool_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Database Pool — db_pool_open","text":"database pool object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Choices for JavaScript Survey Library — format_choices_for_js","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"Formats R choice data structures format compatible JavaScript survey components. Handles flat lists choices hierarchical choice structures, support parent-child relationships fields.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"","code":"format_choices_for_js(   choices,   is_parent = FALSE,   child_field = NULL,   is_child = FALSE,   parent_field = NULL,   display_col = NULL,   is_param_parent = FALSE,   choice_ids = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"choices Vector list. Either vector choices list hierarchical choices. is_parent Logical. Whether field parent field. Default: FALSE. child_field String. Name field containing child choices. is_child Logical. Whether field contains child choices. Default: FALSE. parent_field String. Name field containing parent choices. display_col String. Optional column name containing display text. is_param_parent Logical. Whether parameter parent field. Default: FALSE. choice_ids Vector. Optional IDs associate choices.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"list formatted JavaScript survey components containing: type: Field type (\"parent\", \"param_parent\", \"child\", \"standalone\") choices: List formatted choices value, text, relationship data Additional metadata fields depending relationship type","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/format_choices_for_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format Choices for JavaScript Survey Library — format_choices_for_js","text":"","code":"if (FALSE) { # \\dontrun{ # Parent choices choices <- c(\"parent1\", \"parent2\") formatted <- format_choices_for_js(   choices,   is_parent = TRUE,   child_field = \"child_field\" )  # Child choices with parent IDs child_choices <- list(   list(     value = \"child1\",     text = \"Child 1\",     parentId = 1,     parentValue = \"parent1\"   ),   list(     value = \"child2\",     text = \"Child 2\",     parentId = 1,     parentValue = \"parent1\"   ) ) formatted_children <- format_choices_for_js(   child_choices,   is_child = TRUE,   parent_field = \"parent_field\" ) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/generate_survey_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Complete Survey Theme — generate_survey_theme","title":"Generate Complete Survey Theme — generate_survey_theme","text":"Creates comprehensive theme including CSS variables styling SurveyJS components based specified parameters.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/generate_survey_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Complete Survey Theme — generate_survey_theme","text":"","code":"generate_survey_theme(   theme = \"defaultV2\",   primary = \"#003594\",   mode = \"light\",   custom_css = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/generate_survey_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Complete Survey Theme — generate_survey_theme","text":"theme String. Base theme template, either \"defaultV2\" \"modern\". Default: \"defaultV2\". primary String. Hex color code primary theme color (e.g., \"#1ab394\"). mode String. Color scheme mode, either \"light\" \"dark\". Default: \"light\". custom_css String. Additional CSS rules append theme. Default: NULL. primary_foreground String. Hex color code text primary elements. specified, automatically determined contrast.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/generate_survey_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Complete Survey Theme — generate_survey_theme","text":"String containing complete CSS stylesheet survey styling","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_contrast_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Contrasting Text Color — get_contrast_color","title":"Get Contrasting Text Color — get_contrast_color","text":"Determines optimal text color (black white) based background color brightness using W3C compliant relative luminance calculation.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_contrast_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Contrasting Text Color — get_contrast_color","text":"","code":"get_contrast_color(background_hex)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_contrast_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Contrasting Text Color — get_contrast_color","text":"background_hex String. Background hex color code (e.g., \"#123456\").","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_contrast_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Contrasting Text Color — get_contrast_color","text":"String. Hex color code text: \"#000000\" dark text \"#FFFFFF\" light text ensure WCAG contrast requirements met.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_source_display_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Display Text for Source Parameters — get_source_display_text","title":"Get Display Text for Source Parameters — get_source_display_text","text":"Retrieves display text source identifier configuration table. Returns original value mapping exists.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_source_display_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Display Text for Source Parameters — get_source_display_text","text":"","code":"get_source_display_text(source_value, config_source_df)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_source_display_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Display Text for Source Parameters — get_source_display_text","text":"source_value Character. Source identifier (e.g., \"GITHUB\", \"CRAN\"). config_source_df Data frame. Configuration table columns: source: Source identifier display_text: Display text source","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_source_display_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Display Text for Source Parameters — get_source_display_text","text":"Character string containing display text original source value","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_unique_field_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Existing Values for Unique Fields — get_unique_field_values","title":"Get Existing Values for Unique Fields — get_unique_field_values","text":"Retrieves existing values database fields require uniqueness validation according dynamic configuration.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_unique_field_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Existing Values for Unique Fields — get_unique_field_values","text":"","code":"get_unique_field_values(dynamic_config, db_ops, write_table)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_unique_field_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Existing Values for Unique Fields — get_unique_field_values","text":"dynamic_config List. Configuration specifying fields requiring unique values. entry contain: config_type: Must \"unique\" config_col: Column check uniqueness db_ops Object. Database operations handler containing read methods. write_table String. Name database table check values .","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/get_unique_field_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Existing Values for Unique Fields — get_unique_field_values","text":"Named list mapping field names vectors existing values database.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Hexadecimal Color Code to RGB Values — hex_to_rgb","title":"Convert Hexadecimal Color Code to RGB Values — hex_to_rgb","text":"Converts hex color code (e.g., \"#FF0000\") numeric vector RGB values 0 255.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Hexadecimal Color Code to RGB Values — hex_to_rgb","text":"","code":"hex_to_rgb(hex)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Hexadecimal Color Code to RGB Values — hex_to_rgb","text":"hex Character. Hex color code, without leading \"#\".","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Hexadecimal Color Code to RGB Values — hex_to_rgb","text":"Numeric vector length 3 containing RGB values (0-255).","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hex_to_rgb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Hexadecimal Color Code to RGB Values — hex_to_rgb","text":"","code":"hex_to_rgb(\"#FF0000\")  # Returns c(255, 0, 0) #> Error in hex_to_rgb(\"#FF0000\"): could not find function \"hex_to_rgb\" hex_to_rgb(\"00FF00\")   # Returns c(0, 255, 0) #> Error in hex_to_rgb(\"00FF00\"): could not find function \"hex_to_rgb\""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hide_and_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Switch Visibility Between Two Elements — hide_and_show","title":"Switch Visibility Between Two Elements — hide_and_show","text":"Shows one element hiding another element via shinyjs. Provides simple toggle two HTML elements without animations.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hide_and_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Switch Visibility Between Two Elements — hide_and_show","text":"","code":"hide_and_show(hide_id, show_id)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/hide_and_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Switch Visibility Between Two Elements — hide_and_show","text":"hide_id String. ID element hide. show_id String. ID element show.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/is_light_color.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if a Color is Light or Dark — is_light_color","title":"Determine if a Color is Light or Dark — is_light_color","text":"Calculates relative luminance hex color code compares threshold determine color considered light dark.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/is_light_color.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if a Color is Light or Dark — is_light_color","text":"","code":"is_light_color(hex, threshold = 0.35)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/is_light_color.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if a Color is Light or Dark — is_light_color","text":"hex Character. Hex color code (e.g., \"#FFFFFF\"). threshold Numeric. Luminance threshold 0 1. Values threshold considered light. Default: 0.35","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/is_light_color.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if a Color is Light or Dark — is_light_color","text":"Logical. TRUE color light, FALSE dark.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/normalize_field_value.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Field Value for Comparison — normalize_field_value","title":"Normalize Field Value for Comparison — normalize_field_value","text":"Takes character value normalizes consistent comparison converting lowercase, trimming whitespace, removing multiple spaces, optionally removing special characters.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/normalize_field_value.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Field Value for Comparison — normalize_field_value","text":"","code":"normalize_field_value(value, remove_special = TRUE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/normalize_field_value.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Field Value for Comparison — normalize_field_value","text":"value Character. Value normalize. remove_special Logical. Remove special characters. Default: FALSE.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/normalize_field_value.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Field Value for Comparison — normalize_field_value","text":"Character. Normalized string value.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse URL Query Parameters — parse_query","title":"Parse URL Query Parameters — parse_query","text":"Extracts decodes query parameters URL string Shiny session, returning named list parameter values. Handles URL encoding, empty values, multiple parameters name.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse URL Query Parameters — parse_query","text":"","code":"parse_query(input)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse URL Query Parameters — parse_query","text":"input Character string URL query parameters, Shiny session object.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse URL Query Parameters — parse_query","text":"Named list decoded query parameters.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/parse_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse URL Query Parameters — parse_query","text":"","code":"# Parse from URL string params <- parse_query(\"https://example.com/page?name=John&age=25\") #> Error in parse_query(\"https://example.com/page?name=John&age=25\"): could not find function \"parse_query\"  # Parse within Shiny server if (FALSE) { # \\dontrun{ server <- function(input, output, session) {   params <- parse_query(session) } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and Cache Tables for Dynamic Fields — read_and_cache","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"Creates cache database tables efficient access reading tables database storing list. prevents redundant database reads dynamic field population.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"","code":"read_and_cache(db_ops, dynamic_config)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"db_ops Object. Database operations object read_table method accepts table name parameter. dynamic_config List. Table configurations. configuration must contain: table_name: Name database table read Additional configuration fields allowed used caching","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/read_and_cache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and Cache Tables for Dynamic Fields — read_and_cache","text":"Named list data frames. Access tables using tables$table_name.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Up Server Session Resources — server_clean","title":"Clean Up Server Session Resources — server_clean","text":"Handles cleanup tasks Shiny session ends logging session termination closing database connections. called within server initialization.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Up Server Session Resources — server_clean","text":"","code":"server_clean(session, logger, zone = \"SURVEY\")"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Up Server Session Resources — server_clean","text":"session Shiny session object logger Logger object log_message method event recording zone Character. Logging zone identifier. Default: \"SURVEY\"","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Up Server Session Resources — server_clean","text":"return value, called side effects","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Up Server Session Resources — server_clean","text":"","code":"if (FALSE) { # \\dontrun{ server <- function(input, output, session) {   logger <- LoggerFactory$new()   server_clean(session, logger) } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey Response Table Output — server_response","title":"Create Survey Response Table Output — server_response","text":"Sets server-side logic displaying survey responses themed DataTable. Handles rendering, visibility control, theme-based styling.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey Response Table Output — server_response","text":"","code":"server_response(   output,   rv,   show_response = TRUE,   theme_mode = \"light\",   theme_color = \"#003594\" )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey Response Table Output — server_response","text":"output Shiny output object. rv Reactive values object containing: survey_completed: Boolean indicating survey completion loading: Boolean loading state survey_responses: Data frame responses error_message: Error message string show_response Logical. Display response table. Default: FALSE. theme_mode String. Color mode, either \"light\" \"dark\". Default: \"light\". theme_color String. Hex color code primary theme.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Survey Response Table Output — server_response","text":"Creates two reactive outputs: surveyResponseTable: Themed DataTable responses showResponseTable: Visibility control Table displays : Survey completed loading errors present show_response TRUE Theme styling: Light mode: White background, dark text Dark mode: Dark background, light text","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Survey Response Table Output — server_response","text":"","code":"if (FALSE) { # \\dontrun{ server <- function(input, output, session) {   rv <- reactiveValues(     survey_completed = FALSE,     loading = FALSE,     survey_responses = data.frame(),     error_message = NULL   )    server_response(     output,     rv,     show_response = TRUE,     theme_mode = \"light\",     theme_color = \"#003594\"   ) } } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Server Components for Survey Application — server_setup","title":"Setup Server Components for Survey Application — server_setup","text":"Setup server-side components survey application initializing logging database operations parent environment. Creates logger instance establishes database connections error handling.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Server Components for Survey Application — server_setup","text":"","code":"server_setup(   session,   db_config,   app_pool,   survey_logger,   db_ops,   suppress_logs )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Server Components for Survey Application — server_setup","text":"session Shiny session object containing session token. db_config List. Database configuration parameters: log_table: Name logging table write_table: Name survey data table app_pool Database connection pool object global environment survey_logger Reference class object logging functionality db_ops Reference class object database operations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Server Components for Survey Application — server_setup","text":"Creates two objects parent environment: logger: Initialized survey logger object db_ops: Initialized database operations object (NULL initialization fails)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/server_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Server Components for Survey Application — server_setup","text":"","code":"if (FALSE) { # \\dontrun{ server_setup(   session = session,   db_config = db_config,   app_pool = app_pool,   survey_logger = survey_logger,   db_ops = db_ops ) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy a Survey Shiny Application — survey","title":"Deploy a Survey Shiny Application — survey","text":"Creates deploys Shiny application survey using SurveyJS (https://surveyjs.io) PostgreSQL database integration. application handles survey data collection, dynamic fields, asynchronous logging future plan.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy a Survey Shiny Application — survey","text":"","code":"survey(   json = NULL,   list = NULL,   show_response = FALSE,   theme = \"defaultV2\",   theme_color = \"#003594\",   theme_mode = \"light\",   shiny_config = list(host = \"0.0.0.0\", port = 3838),   db_config = list(host = Sys.getenv(\"HOST\"), port = as.numeric(Sys.getenv(\"PORT\")),     db_name = Sys.getenv(\"DB_NAME\"), user = Sys.getenv(\"USER\"), password =     Sys.getenv(\"PASSWORD\"), write_table = Sys.getenv(\"WRITE_TABLE\"), log_table =     Sys.getenv(\"LOG_TABLE\")),   dynamic_config = NULL,   cookie_expiration_days = 7,   custom_css = NULL,   suppress_logs = FALSE )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy a Survey Shiny Application — survey","text":"json String. JSON survey definition object. list List. Survey structure convert JSON. show_response Logical. Display responses data.table submission. Default: FALSE. theme String. SurveyJS theme, either \"defaultV2\" \"modern\". Default: \"defaultV2\". theme_color String. Hex color code primary theme customization. theme_mode String. Color mode, either \"light\" \"dark\". Default: \"light\". shiny_config List. Optional Shiny configuration parameters. db_config List. Database connection parameters. specified, values read environment variables: host: Database host (env: HOST) port: Database port (env: PORT) db_name: Database name (env: DB_NAME) user: Database username (env: USER) password: Database password (env: PASSWORD) write_table: Survey data table name (env: WRITE_TABLE) log_table: Log messages table name (env: LOG_TABLE) dynamic_config List. Configuration dynamic fields. Supports three types: cookie_expiration_days Numeric. Number days retain survey cookies. Default: 7. custom_css String. Custom CSS rules append theme. suppress_logs Logical. Suppress console log messages. Default: FALSE.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"choice-configuration","dir":"Reference","previous_headings":"","what":"Choice Configuration","title":"Deploy a Survey Shiny Application — survey","text":"Populates dropdown radio button choices database tables: * config_type: Set \"choice\" * table_name: Database table populate choices * config_col: Column containing choice text * display_col: Optional column display text","code":"For dependent fields: * `parent_table_name`: Parent table for dependency chain * `parent_id_col`: Column linking to parent table"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"parameter-configuration","dir":"Reference","previous_headings":"","what":"Parameter Configuration","title":"Deploy a Survey Shiny Application — survey","text":"Handles URL query parameters hidden fields: * config_type: Set \"param\" * table_name: Database table valid parameters * config_col: Column matching URL parameter name * display_col: Optional column display text","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"unique-value-configuration","dir":"Reference","previous_headings":"","what":"Unique Value Configuration","title":"Deploy a Survey Shiny Application — survey","text":"Validates unique entries existing database records: * config_type: Set \"unique\" * config_col: Column check uniqueness * result: Action duplicate (\"warn\" \"stop\") * result_field: Survey field warning message (hidden)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy a Survey Shiny Application — survey","text":"Shiny application object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy a Survey Shiny Application — survey","text":"","code":"if (FALSE) { # \\dontrun{ # Choice configuration example dynamic_config <- list(   list(     config_type = \"choice\",     table_name = \"packages\",     config_col = \"name\"   ) )  # Parameter configuration example dynamic_config <- list(   list(     config_type = \"param\",     table_name = \"sources\",     config_col = \"source\",     display_col = \"display_text\"   ) )  # Unique value configuration example dynamic_config <- list(   list(     config_type = \"unique\",     config_col = \"title\",     result = \"warn\",     result_field = \"warning_message\"   ) ) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny App Logger Class — survey_logger","title":"Shiny App Logger Class — survey_logger","text":"Creates new logger instance recording application messages asynchronously PostgreSQL database visual console feedback.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Shiny App Logger Class — survey_logger","text":"R6 class object.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shiny App Logger Class — survey_logger","text":"R6 class provides asynchronous logging functionality Shiny application messages. class efficiently handles logging PostgreSQL database using connection pooling futures non-blocking database operations.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"message-types","dir":"Reference","previous_headings":"","what":"Message Types","title":"Shiny App Logger Class — survey_logger","text":"Supported message types distinct visual styles: INFO: Regular informational messages (green) WARN: Warning messages (yellow) ERROR: Error messages (red)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public Fields","title":"Shiny App Logger Class — survey_logger","text":"log_table: Character. Database table name logging session_id: Character. Unique identifier current session survey_name: Character. Name survey logged db_params: List. Database connection parameters suppress_logs: Logical. Whether suppress console output","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"public-fields-1","dir":"Reference","previous_headings":"","what":"Public fields","title":"Shiny App Logger Class — survey_logger","text":"log_table Character string specifying name PostgreSQL table logs stored. session_id Character string containing unique identifier current Shiny session. survey_name Character string identifying survey logged. db_params List containing PostgreSQL connection parameters including host, port, database name, username password. suppress_logs Logical flag indicating whether suppress console output messages. TRUE, messages logged database without console feedback. Initialize new survey logger instance Creates new logger instance ensures logging table exists database. Connection parameters read environment variables explicitly provided.","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Shiny App Logger Class — survey_logger","text":"survey_logger$new() survey_logger$log_message() survey_logger$clone()","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class — survey_logger","text":"","code":"survey_logger$new(log_table, session_id, survey_name, suppress_logs = FALSE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class — survey_logger","text":"log_table Character string specifying name logging table session_id Character string containing unique session identifier survey_name Character string identifying survey suppress_logs Logical flag suppress console output. Default: FALSE","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Shiny App Logger Class — survey_logger","text":"new survey_logger instance (invisible) Log message asynchronously Records message PostgreSQL database asynchronously using futures provides visual console feedback based message type. Messages stored timestamp, session ID, zone information.","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class — survey_logger","text":"","code":"survey_logger$log_message(message, type = \"INFO\", zone = \"DEFAULT\")"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class — survey_logger","text":"message Character string containing message log type Character string specifying message type. Must one : \"INFO\": Regular informational messages (green) \"WARN\": Warning messages (yellow) \"ERROR\": Error messages (red) Default: \"INFO\" zone Character string identifying logging zone message categorization. Default: \"DEFAULT\"","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Shiny App Logger Class — survey_logger","text":"NULL invisibly. Operation happens asynchronously.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Shiny App Logger Class — survey_logger","text":"objects class cloneable method.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class — survey_logger","text":"","code":"survey_logger$clone(deep = FALSE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class — survey_logger","text":"deep Whether make deep clone.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny App Logger Class — survey_logger","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize logger with console output logger <- survey_logger$new(   log_table = \"survey_app_logs\",   session_id = \"user123\",   survey_name = \"customer_feedback\" )  # Log different types of messages logger$log_message(\"Survey started\", \"INFO\", \"initialization\") logger$log_message(\"Missing optional field\", \"WARN\", \"validation\") logger$log_message(\"Database error\", \"ERROR\", \"data\") } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Global Survey Environment and Database Connection — survey_setup","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"Setup global survey environment creating database connections, environment variables, future asynchronous processing plan. Validates database configuration, sets environment variables needed, configures Shiny settings, establishes database connection pool, initializes future plan.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"","code":"survey_setup(db_config, shiny_config = NULL, workers = 2L)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"db_config List. Database configuration parameters: host: Database host address port: Database port number db_name: Name database user: Database username password: Database password write_table: Table name write operations shiny_config List. Optional Shiny configuration parameters pass configure_shiny(). Applied database initialization. workers Integer. Number workers parallel processing. Default: 3.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"Invisibly returns initialized database pool object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Global Survey Environment and Database Connection — survey_setup","text":"function: Validates write_table non-empty Checks required database fields Sets environment variables missing (HOST, PORT, DB_NAME, USER, PASSWORD) Applies optional Shiny settings Creates global database pool needed Initializes future package based OS: Windows: Uses multisession macOS/Linux: Uses multicore supported, falls back multisession database pool stored globally 'app_pool' reused exists. Environment variables set already present.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"Creates consolidated JavaScript code bundle handling single survey functionality, including configuration, cookie management, progress saving, Shiny integration, initialization, event handlers.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"","code":"survey_single_js(cookie_expiration_days = 7)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"cookie_expiration_days Numeric. Number days retain survey cookies. Must positive. Default: 7.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"String containing concatenated JavaScript code survey functionality","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_single_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate JavaScript Code for Single Survey Implementation — survey_single_js","text":"","code":"# Default 7-day cookie expiration js_code <- survey_single_js() #> Error in survey_single_js(): could not find function \"survey_single_js\"  # Custom 30-day cookie expiration js_code <- survey_single_js(cookie_expiration_days = 30) #> Error in survey_single_js(cookie_expiration_days = 30): could not find function \"survey_single_js\""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey UI with CSS and Message Components — survey_ui","title":"Create Survey UI with CSS and Message Components — survey_ui","text":"Builds UI components SurveyJS-based survey, including CSS styling, message panels, data display elements.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey UI with CSS and Message Components — survey_ui","text":"","code":"survey_ui(id, theme, primary, mode, cookie_expiration_days, custom_css)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey UI with CSS and Message Components — survey_ui","text":"id String. HTML ID survey container div. Default: \"surveyContainer\". theme String. SurveyJS theme, either \"defaultV2\" \"modern\". Default: \"defaultV2\". primary String. Hex color code primary theme customization. mode String. Color mode, either \"light\" \"dark\". Default: \"light\". cookie_expiration_days Numeric. Number days retain survey cookies. Default: 7. custom_css String. Custom CSS rules append theme.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Survey UI with CSS and Message Components — survey_ui","text":"tagList containing survey dependencies, container div, message panels, optional data display components.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey UI Wrapper — survey_ui_wrapper","title":"Create Survey UI Wrapper — survey_ui_wrapper","text":"Creates Shiny UI wrapper displaying survey optional response table. UI includes loading spinner conditional panels based survey state.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey UI Wrapper — survey_ui_wrapper","text":"","code":"survey_ui_wrapper(   id,   theme,   theme_color,   theme_mode,   cookie_expiration_days,   custom_css )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey UI Wrapper — survey_ui_wrapper","text":"id String. ID survey div container. theme String. SurveyJS theme, either \"defaultV2\" \"modern\". Default: \"defaultV2\". theme_color String. Hex color code primary theme customization. theme_mode String. Color mode, either \"light\" \"dark\". Default: \"light\". cookie_expiration_days Numeric. Number days retain survey cookies. Default: 7. custom_css String. Custom CSS rules append theme.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_ui_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Survey UI Wrapper — survey_ui_wrapper","text":"Shiny UI definition containing survey container, loading spinner, optional response table.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/transform_validated_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform Validated Parameters — transform_validated_params","title":"Transform Validated Parameters — transform_validated_params","text":"Transforms list validated parameters structured format text/value pairs, looking display text configuration tables applicable.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/transform_validated_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform Validated Parameters — transform_validated_params","text":"","code":"transform_validated_params(validated_params, config_list)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/transform_validated_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform Validated Parameters — transform_validated_params","text":"validated_params List parameters format list(param_name = \"value\") list(param_name = list(value = \"value\")). config_list List configuration data frames: config_source: Table 'source' 'display_text' columns config_packages: Table package configurations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/transform_validated_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform Validated Parameters — transform_validated_params","text":"List transformed parameters format list(param_name = list(text = \"display_text\", value = \"value\"))","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Survey Response Duration — update_duration_save","title":"Update Survey Response Duration — update_duration_save","text":"Updates duration_save field survey response identified session ID. Records time spent completing survey final submission.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Survey Response Duration — update_duration_save","text":"","code":"update_duration_save(db_ops, db_config, session_id, duration_save, logger)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Survey Response Duration — update_duration_save","text":"db_ops Database operations object query execution db_config List. Database configuration parameters: write_table: Survey response data table name session_id String. Shiny session token identifying response duration_save Numeric. Survey completion duration seconds logger Logger object. Records database operations errors","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/update_duration_save.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Survey Response Duration — update_duration_save","text":"Invisible NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate Dynamic Configuration — validate_dynamic_config","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"Validates survey field dynamic configuration structure, checking configuration types, required parameters, database table references. Provides detailed validation results caches validated tables.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"","code":"validate_dynamic_config(   dynamic_config,   config_list = NULL,   survey_logger = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"dynamic_config List. Dynamic field configurations validate required elements: config_type: Configuration type (\"choice\", \"param\", \"unique\") Additional type-specific parameters defined survey documentation config_list List. Pre-cached configuration tables validation. Default: NULL. survey_logger Logger. Logging object validation messages.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_dynamic_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate Dynamic Configuration — validate_dynamic_config","text":"Named list: valid: Logical. TRUE configuration passes checks errors: Character. Validation error messages cached_tables: List. Validated cached database tables","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_url_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate URL Parameters Against Config Tables — validate_url_parameters","title":"Validate URL Parameters Against Config Tables — validate_url_parameters","text":"Validates URL query parameters cached configuration tables marked \"param\" type. Ensures parameter values exist corresponding reference tables.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_url_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate URL Parameters Against Config Tables — validate_url_parameters","text":"","code":"validate_url_parameters(   dynamic_config,   config_list,   query_list,   survey_logger = NULL )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_url_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate URL Parameters Against Config Tables — validate_url_parameters","text":"dynamic_config List. Configuration entries defining parameter validation rules. config_list List. Cached configuration tables read_and_cache(). query_list List. Parsed URL query parameters parse_query(). survey_logger Logger. Object recording validation results errors.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/validate_url_parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate URL Parameters Against Config Tables — validate_url_parameters","text":"list containing: valid: Logical. TRUE parameters valid. errors: Character vector. Error messages invalid parameters. values: List. Validated cleaned parameter values.","code":""}]
