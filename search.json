[{"path":"https://dylanpieper.github.io/shinysurveyjs/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 shinysurveyjs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Pieper. Author, maintainer.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pieper D (2025). shinysurveyjs: Deploy SurveyJS Survey Applications Using R Shiny. R package version 0.1.0, https://dylanpieper.github.io/shinysurveyjs.","code":"@Manual{,   title = {shinysurveyjs: Deploy SurveyJS Survey Applications Using R Shiny},   author = {Dylan Pieper},   year = {2025},   note = {R package version 0.1.0},   url = {https://dylanpieper.github.io/shinysurveyjs}, }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"shinysurveyjs-shinysurveyjs-website","dir":"","previous_headings":"","what":"Deploy SurveyJS Survey Applications Using R Shiny","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"Deploy survey applications using SurveyJS Shiny R advanced database integration.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"shinysurveyjs bridges gap SurveyJS‚Äôs frontend survey creation Shiny‚Äôs backend data plumbing, enabling individuals organizations deploy survey applications : Bring Database: Setup database survey tables full control Multisurvey applications: URL-based routing share multiple surveys one application Many--one mapping: Map multiple surveys single table Database logic survey fields: Choice population validation database sources Dual logging system: Console logging development, database logging production Enterprise features: Custom survey themes, metadata collection","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"Install development version GitHub:","code":"pak::pak(\"dylanpieper/shinysurveyjs\")"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"example shows portion two grant management surveys researchers first drop opportunity information, later create concept models opportunities. pattern applies many scenarios including patient intake follow-event registration feedback.","code":"library(shinysurveyjs)  # Database configuration (reused across examples) db_config <- list(   driver = RMariaDB::MariaDB(),   host = \"database.example.com\",   port = 3306,   db_name = \"research_db\",   user = \"db_user\",   password = keyring::key_get(\"db_pass\", \"research_db\"),   log_table = \"survey_logs\",   pool_size = 10 )  # Define the first survey: Grant opportunity drop tracking grant_drops <- list(   title = \"Opportunity Drop\",   pages = list(     list(       name = \"drop\",       elements = list(         list(           type = \"text\",           name = \"title\",           title = \"Official title of opportunity\",           description = \"Please copy/paste to capture any potential duplicates\",           isRequired = TRUE         ),         list(           type = \"html\",           name = \"match_warning\",           visible = FALSE,           html = \"üõë <b>Error:<\/b> Duplicate submission(s) were found in the database.\"         ),         list(           type = \"dropdown\",           name = \"grant_funders_id\",           title = \"Funder\",           isRequired = TRUE,           choices = c(\"Placeholder\"), # Populated from database           showOtherItem = TRUE,           storeOthersAsComment = FALSE         )       )     )   ) )  # Define the second survey: Concept model creation grant_concept <- list(   title = \"Concept Model\",   pages = list(     list(       name = \"concept\",       elements = list(         list(           type = \"dropdown\",           name = \"grant_drops_id\",           title = \"Select grant\",           isRequired = TRUE,           choices = c(\"Placeholder\") # Populated from previous survey data         ),         list(           type = \"text\",           name = \"cm_note\",           title = \"Note your concept for this grant\",           isRequired = TRUE         )       )     )   ) )  # Deploy multi-survey application survey(   list = list(     \"grant_drops\" = grant_drops,     # Access at /?survey=grant_drops     \"grant_concept\" = grant_concept  # Access at /?survey=grant_concept   ),   shiny_config = list(     host = \"0.0.0.0\",     port = 3838   ),   db_config = db_config,      # Update grant_drops table when concept model is submitted   db_update = list(     list(       from = \"grant_concept\",       to = \"grant_drops\",       by = c(\"grant_drops_id\" = \"id\")     )   ),      # Database field logic   db_logic = list(     # Populate funders dropdown from database     list(       type = \"choice\",       source_tbl = \"grant_funders\",       source_col = \"id\",       source_display_col = c(\"name\", \"agency\"), # Pastes column strings       target_tbl = \"grant_drops\",       target_col = \"grant_funders_id\"     ),          # Prevent duplicate grant titles     list(       type = \"unique\",       source_tbl = \"grant_drops\",       source_col = \"title\",       target_tbl = \"grant_drops\",       target_col = \"title\",       result = \"stop\",       result_field = \"match_warning\"     ),          # Populate available grants (only those without concept models)     list(       type = \"choice\",       source_tbl = \"grant_drops\",       source_col = \"id\",       source_display_col = \"title\",       target_tbl = \"grant_concept\",       target_col = \"grant_drops_id\",       filter_source = \"is.na(cm_note)\" # Only show grants without concept models     )   ) )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"single-survey-usage","dir":"","previous_headings":"","what":"Single survey usage","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"simple single-survey applications, pass survey definition directly: Use write_table db_config deploying single surveys unnamed survey lists. named survey lists (multi-survey apps), table names derived list names.","code":"library(shinysurveyjs)  # Database configuration (reused across examples) db_config <- list(   driver = RMariaDB::MariaDB(),   host = \"localhost\",   db_name = \"survey_db\",    user = \"user\",   password = \"pass\",   write_table = \"responses\", # Required for single surveys   log_table = \"survey_logs\" )  # Example survey definition feedback_survey <- list(   title = \"Feedback Survey\",   pages = list(     list(       name = \"feedback\",       elements = list(         list(           type = \"rating\",           name = \"satisfaction\",           title = \"How satisfied are you with our service?\",           rateMin = 1,           rateMax = 5,           isRequired = TRUE         ),         list(           type = \"comment\",           name = \"comments\",           title = \"Additional comments\"         )       )     )   ) )  # Using JSON definition survey(   json = '{\"title\": \"Quick Poll\", \"pages\": [{\"name\": \"poll\", \"elements\": [{\"type\": \"text\", \"name\": \"response\", \"title\": \"What do you think?\", \"isRequired\": true}]}]}',   db_config = db_config )  # Using list definition   survey(   list = feedback_survey,   db_config = db_config )"},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"database-integration","dir":"","previous_headings":"Key features","what":"Database integration","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"DBI database support: team testing application MySQL (default), DBI-compatible database drivers can used. Connection pooling: Automatic connection pooling configurable pool size (default: 10 connections) concurrent request handling. Transaction safety: Full ACID compliance automatic transaction management. Operations use dedicated connections pool automatic commit/rollback success/failure.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"database-logic-for-survey-fields","dir":"","previous_headings":"Key features","what":"Database logic for survey fields","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"Control survey behavior database logic:","code":"# Choice fields populated from database list(   type = \"choice\",   source_tbl = \"categories\",       # Data source table     source_col = \"id\",               # Value column   source_display_col = \"name\",     # Display text column   target_col = \"category_id\",      # Survey field to populate   filter_source = \"active == 1\",   # R expression filter   filter_unique = TRUE             # Remove already-used options )  # Parameter validation from URLs   list(   type = \"param\",   source_tbl = \"valid_sources\",   target_col = \"referral_source\"   # Validates and stores in hidden field )  # Uniqueness validation list(   type = \"unique\",    source_tbl = \"participants\",   source_col = \"email\",   result = \"warn\",                 # \"warn\" or \"stop\"   result_field = \"email_warning\"   # Field to show warning message )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"dual-logging-system","dir":"","previous_headings":"Key features","what":"Dual logging system","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"Console logging: Immediate feedback development Error logging SQL statement capture Survey completion timing (load, complete, save durations) IP address tracking database log table created automatically.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"advanced-configuration","dir":"","previous_headings":"Key features","what":"Advanced configuration","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"","code":"# Database configuration db_config <- list(   driver = RMariaDB::MariaDB(),   host = \"database.example.com\",   port = 3306,   db_name = \"survey_db\",   user = \"db_user\",   password = keyring::key_get(\"db_pass\", \"survey_db\"),   log_table = \"survey_logs\",   pool_size = 10 )  survey(   list = my_surveys,   db_config = db_config,      # Shiny server configuration   shiny_config = list(     host = \"0.0.0.0\",      # Bind to all interfaces     port = 8080            # Custom port   ),      # Theme customization   theme = \"modern\",        # \"defaultV2\" or \"modern\"   theme_color = \"#1f77b4\", # Primary color   custom_css = \"     .sv-root { font-family: 'Roboto', sans-serif; }     .sv-page { max-width: 800px; margin: 0 auto; }   \",      # Progress tracking   cookie_expiration_days = 30,  # Save progress for 30 days      # Development/production options   show_response = TRUE,    # Display data table after submission   echo = FALSE             # Hide console output )"},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"environment-variables","dir":"","previous_headings":"Configuration","what":"Environment variables","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"Set database connection parameters using environment variables:","code":"# .Renviron file DB_HOST=database.example.com DB_PORT=3306  DB_NAME=research_db DB_USER=db_user DB_PASSWORD=db_pass WRITE_TABLE=survey_responses # For single survey use case LOG_TABLE=survey_logs"},{"path":"https://dylanpieper.github.io/shinysurveyjs/index.html","id":"secure-credential-management","dir":"","previous_headings":"Configuration","what":"Secure credential management","title":"Deploy SurveyJS Survey Applications Using R Shiny","text":"Use keyring production deployments:","code":"library(keyring)  # Store credentials securely keyring::key_set(\"db_pass\", username = \"research_db\")  # Database configuration with secure credentials db_config <- list(   driver = RMariaDB::MariaDB(),   host = \"database.example.com\",   port = 3306,   user = \"db_user\",    password = keyring::key_get(\"db_pass\", \"research_db\"),   db_name = \"research_db\",   log_table = \"survey_logs\",   pool_size = 10 )  # Use in survey survey(list = my_surveys, db_config = db_config)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Database Operations Class ‚Äî db_ops","title":"Database Operations Class ‚Äî db_ops","text":"R6 Class managing database operations related survey data storage retrieval using MySQL DBI-compatible databases.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Database Operations Class ‚Äî db_ops","text":"class handles database interactions survey data, including: Table creation modification Data insertion retrieval Transaction management Error handling logging","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Database Operations Class ‚Äî db_ops","text":"conn Database connection logger Logger instance tracking operations","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Database Operations Class ‚Äî db_ops","text":"db_ops$new() db_ops$operate() db_ops$create_survey_table() db_ops$update_survey_table() db_ops$read_table() db_ops$update_by_id() db_ops$perform_survey_update() db_ops$get_required_columns() db_ops$clone()","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Database Operations Class ‚Äî db_ops","text":"Create new Database Operations instance","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$new(conn, logger)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"conn Connection object. Database connection logger survey_logger object. Logger instance tracking operations","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-operate-","dir":"Reference","previous_headings":"","what":"Method operate()","title":"Database Operations Class ‚Äî db_ops","text":"Execute database operation transaction handling","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$operate(operation, error_message)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"operation Function. database operation execute error_message Character. Message display operation fails","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Result operation error message failed","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-create-survey-table-","dir":"Reference","previous_headings":"","what":"Method create_survey_table()","title":"Database Operations Class ‚Äî db_ops","text":"Check pre-defined survey table required columns","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$create_survey_table(write_table, data, survey_obj = NULL)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"write_table Character. Name pre-defined table check data data.frame. Data frame containing required columns survey survey_obj Survey.JS definition object contains complete survey structure. nested list containing: pages List survey pages elements List survey questions/elements, element contains: name Question identifier type Question type (e.g., \"checkbox\", \"text\", \"radio\") showOtherItem Logical. Whether question \"\" option Used determine column types handle special question features like \"\" options. Default: NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Character. sanitized table name Update existing survey table new data","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$update_survey_table(write_table, data)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"write_table Character. Name table update data data.frame. Data frame containing new data","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Character. sanitized table name","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-read-table-","dir":"Reference","previous_headings":"","what":"Method read_table()","title":"Database Operations Class ‚Äî db_ops","text":"Read data survey table optional filtering","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$read_table(   table_name,   columns = NULL,   filters = NULL,   order_by = NULL,   desc = FALSE,   limit = NULL,   update_last_sql = TRUE )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"table_name Character. Name table read columns Character vector. Specific columns read (NULL columns) filters List. Named list filter conditions (e.g., list(status = \"active\")) order_by Character vector. Columns order desc Logical. TRUE, sort descending order limit Numeric. Maximum number rows return (NULL rows) update_last_sql Logical. TRUE, update logger's last_sql_statement (default: TRUE)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"data.frame. requested data","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-update-by-id-","dir":"Reference","previous_headings":"","what":"Method update_by_id()","title":"Database Operations Class ‚Äî db_ops","text":"Update specific columns table given row ID","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$update_by_id(table_name, id, values)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"table_name Character. Name table update id Numeric. Row ID update values List. Named list column-value pairs update","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Invisible(NULL)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-perform-survey-update-","dir":"Reference","previous_headings":"","what":"Method perform_survey_update()","title":"Database Operations Class ‚Äî db_ops","text":"Perform survey update operation using join columns","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$perform_survey_update(source_data, target_table, join_columns)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"source_data data.frame. Data source survey use updates target_table Character. Name target table update join_columns Named character vector. Columns join (source_col = target_col)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Invisible(NULL)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-get-required-columns-","dir":"Reference","previous_headings":"","what":"Method get_required_columns()","title":"Database Operations Class ‚Äî db_ops","text":"Get required columns survey help pre-defined table setup","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$get_required_columns(data, survey_obj = NULL)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"data data.frame. Data frame containing survey data structure survey_obj Survey.JS definition object contains complete survey structure. Used identify fields \"\" options need separate columns.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"List containing required column names recommended MySQL types","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Database Operations Class ‚Äî db_ops","text":"objects class cloneable method.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$clone(deep = FALSE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/db_ops.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"deep Whether make deep clone.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy a Survey Shiny Application ‚Äî survey","title":"Deploy a Survey Shiny Application ‚Äî survey","text":"Creates deploys Shiny application survey using SurveyJS (https://surveyjs.io) MySQL DBI database integration. application handles survey data collection, database logic, asynchronous logging future plan.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy a Survey Shiny Application ‚Äî survey","text":"","code":"survey(   json = NULL,   list = NULL,   show_response = FALSE,   theme = \"defaultV2\",   theme_color = \"#003594\",   shiny_config = list(host = \"0.0.0.0\", port = 3838),   db_config = list(host = Sys.getenv(\"HOST\"), port = as.numeric(Sys.getenv(\"PORT\")),     db_name = Sys.getenv(\"DB_NAME\"), user = Sys.getenv(\"USER\"), password =     Sys.getenv(\"PASSWORD\"), write_table = Sys.getenv(\"WRITE_TABLE\"), log_table =     Sys.getenv(\"LOG_TABLE\")),   db_update = NULL,   db_logic = NULL,   cookie_expiration_days = 0,   custom_css = NULL,   echo = TRUE )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy a Survey Shiny Application ‚Äî survey","text":"json String. JSON survey definition object. list List. Survey structure convert JSON. show_response Logical. Display responses data.table submission. Default: FALSE. theme String. SurveyJS theme, either \"defaultV2\" \"modern\". Default: \"defaultV2\". theme_color String. Hex color code primary theme customization. shiny_config List. Optional Shiny configuration parameters. db_config List. Database connection parameters. specified, values read environment variables: host: Database host (env: HOST) port: Database port (env: PORT) db_name: Database name (env: DB_NAME) user: Database username (env: USER) password: Database password (env: PASSWORD) write_table: Survey data table name (env: WRITE_TABLE) log_table: Log messages table name (env: LOG_TABLE) db_update List. Configuration updating existing records instead inserting new ones. element list containing: : Source survey name update : Target survey name update : Named character vector specifying join columns (e.g., c(\"field_in_from\" = \"field_in_to\")) db_logic List. Configuration database logic. Supports three types: cookie_expiration_days Numeric. Number days retain survey cookies (experimental). Default: 0. custom_css String. Custom CSS rules append theme. echo Logical. Display console log messages. Default: TRUE.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"choice-configuration","dir":"Reference","previous_headings":"","what":"Choice Configuration","title":"Deploy a Survey Shiny Application ‚Äî survey","text":"Populates dropdown radio button choices database tables: * config_type: Set \"choice\" * table_name: Database table populate choices * config_col: Column containing choice text * display_col: Optional column display text","code":"For dependent fields: * `parent_table_name`: Parent table for dependency chain * `parent_id_col`: Column linking to parent table"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"parameter-configuration","dir":"Reference","previous_headings":"","what":"Parameter Configuration","title":"Deploy a Survey Shiny Application ‚Äî survey","text":"Handles URL query parameters hidden fields: * config_type: Set \"param\" * table_name: Database table valid parameters * config_col: Column matching URL parameter name * display_col: Optional column display text","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"unique-value-configuration","dir":"Reference","previous_headings":"","what":"Unique Value Configuration","title":"Deploy a Survey Shiny Application ‚Äî survey","text":"Validates unique entries existing database records: * config_type: Set \"unique\" * config_col: Column check uniqueness * result: Action duplicate (\"warn\" \"stop\") * result_field: Survey field warning message (hidden)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deploy a Survey Shiny Application ‚Äî survey","text":"Shiny application object","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy a Survey Shiny Application ‚Äî survey","text":"","code":"if (FALSE) { # \\dontrun{ # Choice configuration example db_logic <- list(   list(     config_type = \"choice\",     table_name = \"packages\",     config_col = \"name\"   ) )  # Parameter configuration example db_logic <- list(   list(     config_type = \"param\",     table_name = \"sources\",     config_col = \"source\",     display_col = \"display_text\"   ) )  # Unique value configuration example db_logic <- list(   list(     config_type = \"unique\",     config_col = \"title\",     result = \"warn\",     result_field = \"warning_message\"   ) ) } # }"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Survey Logger Class ‚Äî survey_logger","title":"Survey Logger Class ‚Äî survey_logger","text":"R6 Class providing dual logging functionality Shiny survey applications: console messaging database logging survey metadata.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Survey Logger Class ‚Äî survey_logger","text":"logger provides two distinct logging mechanisms: Console Logging (log_message): Immediate color-coded console output app messages, warnings, errors database persistence - console Supports custom zones/contexts message categorization Database Logging (log_entry): Queued logging survey metadata database table Tracks survey completion metrics (timing, errors, SQL statements) Uses batch processing automatic queue management logs database errors survey loaded (conditional logging) Key Features: Dual-purpose logging: console messages + database survey metadata Uses main application connection database operations Efficient batch database writes automatic queue processing Immediate console feedback color coding zone support Database connection health monitoring SQL statement tracking database error debugging","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"console-message-types","dir":"Reference","previous_headings":"","what":"Console Message Types","title":"Survey Logger Class ‚Äî survey_logger","text":"INFO: Regular informational messages (green console output) WARN: Warning messages (yellow console output) ERROR: Error messages (red console output)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Survey Logger Class ‚Äî survey_logger","text":"log_table Character string specifying database table logs session_id Character string containing unique session identifier survey_name Character string identifying current survey survey_loaded Logical flag indicating survey successfully loaded suppress_logs Logical flag suppress console output queue data.frame containing queued messages batch processing last_sql_statement Character string containing last executed SQL statement","code":""},{"path":[]},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Survey Logger Class ‚Äî survey_logger","text":"survey_logger$new() survey_logger$update_survey_name() survey_logger$mark_survey_loaded() survey_logger$update_last_sql_statement() survey_logger$log_entry() survey_logger$log_message() survey_logger$clone()","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Survey Logger Class ‚Äî survey_logger","text":"Initialize new survey logger instance","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$new(log_table, session_id, survey_name, echo = TRUE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey Logger Class ‚Äî survey_logger","text":"log_table Character string specifying logging table name session_id Character string containing session identifier survey_name Character string identifying survey echo Logical flag display console output. Default: TRUE","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-update-survey-name-","dir":"Reference","previous_headings":"","what":"Method update_survey_name()","title":"Survey Logger Class ‚Äî survey_logger","text":"Update survey name logger instance","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$update_survey_name(survey_name)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey Logger Class ‚Äî survey_logger","text":"survey_name Character string identifying new survey name","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Survey Logger Class ‚Äî survey_logger","text":"Invisible NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-mark-survey-loaded-","dir":"Reference","previous_headings":"","what":"Method mark_survey_loaded()","title":"Survey Logger Class ‚Äî survey_logger","text":"Mark survey loaded enable error logging","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$mark_survey_loaded()"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Survey Logger Class ‚Äî survey_logger","text":"Invisible NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-update-last-sql-statement-","dir":"Reference","previous_headings":"","what":"Method update_last_sql_statement()","title":"Survey Logger Class ‚Äî survey_logger","text":"Update last SQL statement executed","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$update_last_sql_statement(sql_statement)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey Logger Class ‚Äî survey_logger","text":"sql_statement Character string containing SQL statement","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Survey Logger Class ‚Äî survey_logger","text":"Invisible NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-log-entry-","dir":"Reference","previous_headings":"","what":"Method log_entry()","title":"Survey Logger Class ‚Äî survey_logger","text":"Queue log entry database insert (loaded surveys)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$log_entry(   survey_id,   message = NULL,   ip_address = NULL,   duration_load = NULL,   duration_complete = NULL,   duration_save = NULL,   sql_statement = NULL,   force_log = FALSE )"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey Logger Class ‚Äî survey_logger","text":"survey_id Integer ID survey table message Character string containing error message (DB errors survey loaded) ip_address Character string containing client IP address duration_load Numeric time spent loading (seconds) duration_complete Numeric time spent completing survey (seconds) duration_save Numeric time spent saving (seconds) sql_statement Character string containing SQL failed (errors) force_log Logical flag force logging even survey loaded (internal use)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Survey Logger Class ‚Äî survey_logger","text":"Invisible NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-log-message-","dir":"Reference","previous_headings":"","what":"Method log_message()","title":"Survey Logger Class ‚Äî survey_logger","text":"Helper method simple console logging (database)","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$log_message(message, type = \"INFO\", zone = \"DEFAULT\")"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey Logger Class ‚Äî survey_logger","text":"message Character string containing message log type Character string specifying message type (INFO/WARN/ERROR) zone Character string specifying logging zone/context (default: \"DEFAULT\")","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Survey Logger Class ‚Äî survey_logger","text":"Invisible NULL","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Survey Logger Class ‚Äî survey_logger","text":"objects class cloneable method.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$clone(deep = FALSE)"},{"path":"https://dylanpieper.github.io/shinysurveyjs/reference/survey_logger.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey Logger Class ‚Äî survey_logger","text":"deep Whether make deep clone.","code":""},{"path":"https://dylanpieper.github.io/shinysurveyjs/news/index.html","id":"shinysurveyjs-development-version","dir":"Changelog","previous_headings":"","what":"shinysurveyjs (development version)","title":"shinysurveyjs (development version)","text":"news yet.","code":""}]
