[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 shinysurveyjs authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dylan Pieper. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pieper D (2025). shinysurveyjs: Create Deploy Surveys Shiny. R package version 0.0.0.9000.","code":"@Manual{,   title = {shinysurveyjs: Create and Deploy Surveys in Shiny},   author = {Dylan Pieper},   year = {2025},   note = {R package version 0.0.0.9000}, }"},{"path":"/index.html","id":"shinysurveyjs","dir":"","previous_headings":"","what":"Create and Deploy Surveys in Shiny","title":"Create and Deploy Surveys in Shiny","text":"goal package integrate flexible frontend SurveyJS library reactive backend Shiny interface PostgreSQL database create dynamic user experiences. Whether need simple feedback form complex survey system organization, package designed scale .","code":""},{"path":"/index.html","id":"basic-features","dir":"","previous_headings":"","what":"Basic Features","title":"Create and Deploy Surveys in Shiny","text":"Host single survey multiple surveys one app Store manage survey data PostgreSQL database, including metadata duration completion, date created updated, Shiny session ID, IP address Design surveys create JSON objects user-friendly visual editor Save survey progress cookies resume later Change primary theme color select dark light themes","code":""},{"path":"/index.html","id":"advanced-features","dir":"","previous_headings":"","what":"Advanced Features","title":"Create and Deploy Surveys in Shiny","text":"Dynamically populate choices (.e., response options) database table create dependent inputs (e.g., select car brand filter available models) Dynamically stage JSON objects database modify surveys using staging table URL query tokens one-time access tokens secure survey distribution Asynchronous worker handle database updates without interrupting survey, including app logging, updating staged JSON objects, managing tokens","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Create and Deploy Surveys in Shiny","text":"","code":"# Install from GitHub pak::pkg_install(\"dylanpieper/shinysurveyjs\")"},{"path":[]},{"path":"/index.html","id":"single-survey","dir":"","previous_headings":"Basic Usage","what":"Single Survey","title":"Create and Deploy Surveys in Shiny","text":"Read survey json object host single survey. Data stored PostgreSQL database table hosted Supabase. default, database configuration looks environmental variables (e.g., Sys.getenv(\"PASSWORD\")) can loaded .env .yaml file secrets manager. Using encrypted secrets recommended production environments.","code":"library(shinysurveyjs)  survey <- '{   \"title\": \"R Package Feedback\",   \"pages\": [     {       \"name\": \"userInfo\",       \"elements\": [         {           \"type\": \"rating\",           \"name\": \"rating\",           \"title\": \"Please rate the shinysurveyjs üì¶:\",           \"rateValues\": [             {\"value\": 1, \"text\": \"‚≠ê\"},             {\"value\": 2, \"text\": \"‚≠ê‚≠ê\"},             {\"value\": 3, \"text\": \"‚≠ê‚≠ê‚≠ê\"},             {\"value\": 4, \"text\": \"‚≠ê‚≠ê‚≠ê‚≠ê\"},             {\"value\": 5, \"text\": \"‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê\"}           ],           \"rateMax\": 5,           \"isRequired\": true         },         {           \"type\": \"comment\",           \"name\": \"feedback\",           \"visibleIf\": \"{rating} notempty\",           \"title\": \"Why did you rate it {rating} stars?\",           \"rows\": 2         },         {           \"type\": \"html\",           \"name\": \"lowRatingMessage\",           \"visibleIf\": \"{rating} <= 2\",           \"html\": \"I am sorry you had a poor experience. Please reach me at <b>dylanpieper@gmail.com<\/b> so I can help improve your experience.\"         }       ]     }   ] }'  survey_single(   json = survey,   show_response = TRUE,   theme_color = \"#00AD6E\",   theme_mode = \"dark\",   shiny_config = list(     host = \"0.0.0.0\",     port = 3838   ),   db_config = list(     host = Sys.getenv(\"HOST\"), # aws-0-us-east-2.pooler.supabase.com     port = as.numeric(Sys.getenv(\"PORT\")), # 5432     db_name = Sys.getenv(\"DB_NAME\"), # postgres     user = Sys.getenv(\"USER\"), # username     password = Sys.getenv(\"PASSWORD\"), # password     write_table = Sys.getenv(\"WRITE_TABLE\"), # survey_package_feedback     log_table = Sys.getenv(\"LOG_TABLE\") # survey_app_logs   ),   cookie_expiration_days = 7 )"},{"path":"/reference/adjust_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"Adjust Hexadecimal Color Values ‚Äî adjust_hex","title":"Adjust Hexadecimal Color Values ‚Äî adjust_hex","text":"Adjusts hexadecimal color value lightening darkening specified percentage. function modifies RGB component ensuring values stay within valid ranges (0-255).","code":""},{"path":"/reference/adjust_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adjust Hexadecimal Color Values ‚Äî adjust_hex","text":"","code":"adjust_hex(hex, percent = 25, lighten = TRUE)"},{"path":"/reference/adjust_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adjust Hexadecimal Color Values ‚Äî adjust_hex","text":"hex Character string. hexadecimal color code (e.g., \"#003594\" \"003594\") percent Numeric. Percentage adjust color (default: 25) lighten Logical. TRUE, lightens color; FALSE, darkens (default: TRUE)","code":""},{"path":"/reference/adjust_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adjust Hexadecimal Color Values ‚Äî adjust_hex","text":"Character string. adjusted hexadecimal color code leading \"#\"","code":""},{"path":"/reference/adjust_hex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adjust Hexadecimal Color Values ‚Äî adjust_hex","text":"","code":"# Lighten a color by 25% adjust_hex(\"#003594\") # Default lighten by 25% #> Error in adjust_hex(\"#003594\"): could not find function \"adjust_hex\"  # Darken a color by 30% adjust_hex(\"#003594\", percent = 30, lighten = FALSE) #> Error in adjust_hex(\"#003594\", percent = 30, lighten = FALSE): could not find function \"adjust_hex\"  # Lighten a color by 50% adjust_hex(\"003594\", percent = 50) # Works with or without leading \"#\" #> Error in adjust_hex(\"003594\", percent = 50): could not find function \"adjust_hex\""},{"path":"/reference/configure_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure Shiny App Settings ‚Äî configure_shiny","title":"Configure Shiny App Settings ‚Äî configure_shiny","text":"Configure Shiny App Settings","code":""},{"path":"/reference/configure_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure Shiny App Settings ‚Äî configure_shiny","text":"","code":"configure_shiny(..., type_handlers = list())"},{"path":"/reference/configure_shiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure Shiny App Settings ‚Äî configure_shiny","text":"... Named arguments corresponding Shiny options. Names prefixed 'shiny.' type_handlers Named list functions process specific options. Default handlers provided numeric, logical, character values.","code":""},{"path":"/reference/configure_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure Shiny App Settings ‚Äî configure_shiny","text":"NULL (invisibly). Sets global options Shiny.","code":""},{"path":"/reference/configure_shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure Shiny App Settings ‚Äî configure_shiny","text":"","code":"if (FALSE) { # \\dontrun{ configure_shiny(   host = \"0.0.0.0\",   port = 3838,   sanitize_errors = TRUE,   autoreload = FALSE ) } # }"},{"path":"/reference/db_ops.html","id":null,"dir":"Reference","previous_headings":"","what":"Database Operations Class ‚Äî db_ops","title":"Database Operations Class ‚Äî db_ops","text":"R6 Class managing database operations related survey data storage retrieval using PostgreSQL. Includes automatic tracking creation date, update date, session ID, IP address.","code":""},{"path":"/reference/db_ops.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Database Operations Class ‚Äî db_ops","text":"class handles database interactions survey data, including: Table creation modification tracking columns Data insertion automatic timestamp management Session IP tracking Transaction management Error handling logging Tracking columns automatically added table: date_created: Timestamp record created date_updated: Timestamp record last updated session_id: Shiny session identifier ip_address: Client IP address","code":""},{"path":"/reference/db_ops.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Database Operations Class ‚Äî db_ops","text":"session_id Unique identifier current session pool Database connection pool logger Logger instance tracking operations","code":""},{"path":[]},{"path":"/reference/db_ops.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Database Operations Class ‚Äî db_ops","text":"db_ops$new() db_ops$operate() db_ops$ensure_tracking_columns() db_ops$create_survey_table() db_ops$update_survey_table() db_ops$clone()","code":""},{"path":"/reference/db_ops.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Database Operations Class ‚Äî db_ops","text":"Create new Database Operations instance","code":""},{"path":"/reference/db_ops.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$new(pool, session_id, logger)"},{"path":"/reference/db_ops.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"pool Pool object. Database connection pool session_id Character. Unique identifier current session logger survey_logger object. Logger instance tracking operations","code":""},{"path":"/reference/db_ops.html","id":"method-operate-","dir":"Reference","previous_headings":"","what":"Method operate()","title":"Database Operations Class ‚Äî db_ops","text":"Execute database operation transaction handling","code":""},{"path":"/reference/db_ops.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$operate(operation, error_message)"},{"path":"/reference/db_ops.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"operation Function. database operation execute error_message Character. Message display operation fails","code":""},{"path":"/reference/db_ops.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Result operation error message failed","code":""},{"path":"/reference/db_ops.html","id":"method-ensure-tracking-columns-","dir":"Reference","previous_headings":"","what":"Method ensure_tracking_columns()","title":"Database Operations Class ‚Äî db_ops","text":"Ensure tracking columns exist table","code":""},{"path":"/reference/db_ops.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$ensure_tracking_columns(table_name)"},{"path":"/reference/db_ops.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"table_name Character. Name table check/modify","code":""},{"path":"/reference/db_ops.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Invisible NULL","code":""},{"path":"/reference/db_ops.html","id":"method-create-survey-table-","dir":"Reference","previous_headings":"","what":"Method create_survey_table()","title":"Database Operations Class ‚Äî db_ops","text":"Create new survey data table tracking columns","code":""},{"path":"/reference/db_ops.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$create_survey_table(write_table, data)"},{"path":"/reference/db_ops.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"write_table Character. Name table create data data.frame. Data frame containing schema new table","code":""},{"path":"/reference/db_ops.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Character. sanitized table name Update existing survey table new data","code":""},{"path":[]},{"path":"/reference/db_ops.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$update_survey_table(write_table, data)"},{"path":"/reference/db_ops.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"write_table Character. Name table update data data.frame. Data frame containing new data","code":""},{"path":"/reference/db_ops.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Database Operations Class ‚Äî db_ops","text":"Character. sanitized table name","code":""},{"path":"/reference/db_ops.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Database Operations Class ‚Äî db_ops","text":"objects class cloneable method.","code":""},{"path":"/reference/db_ops.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Database Operations Class ‚Äî db_ops","text":"","code":"db_ops$clone(deep = FALSE)"},{"path":"/reference/db_ops.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Database Operations Class ‚Äî db_ops","text":"deep Whether make deep clone.","code":""},{"path":"/reference/db_pool_close.html","id":null,"dir":"Reference","previous_headings":"","what":"Close Database Pool ‚Äî db_pool_close","title":"Close Database Pool ‚Äî db_pool_close","text":"Closes database connection pool performs cleanup operations application shutting .","code":""},{"path":"/reference/db_pool_close.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Close Database Pool ‚Äî db_pool_close","text":"","code":"db_pool_close(session)"},{"path":"/reference/db_pool_close.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Close Database Pool ‚Äî db_pool_close","text":"session Shiny session object","code":""},{"path":"/reference/db_pool_open.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Database Pool ‚Äî db_pool_open","title":"Open Database Pool ‚Äî db_pool_open","text":"Creates manages global database pool connection using PostgreSQL.","code":""},{"path":"/reference/db_pool_open.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Database Pool ‚Äî db_pool_open","text":"","code":"db_pool_open(   host = NULL,   port = NULL,   db_name = NULL,   user = NULL,   password = NULL,   min_size = 1,   max_size = Inf )"},{"path":"/reference/db_pool_open.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Open Database Pool ‚Äî db_pool_open","text":"R6 class object","code":""},{"path":"/reference/db_pool_open.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Database Pool ‚Äî db_pool_open","text":"host Database host port Database port db_name Database name user Database username password Database password min_size Minimum pool size (default: 1) max_size Maximum pool size (default: Inf)","code":""},{"path":"/reference/db_pool_open.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Database Pool ‚Äî db_pool_open","text":"database pool object","code":""},{"path":"/reference/hide_and_show.html","id":null,"dir":"Reference","previous_headings":"","what":"Smoothly Transition Between Two Elements ‚Äî hide_and_show","title":"Smoothly Transition Between Two Elements ‚Äî hide_and_show","text":"Creates smooth fade transition two DIV elements fading one element fading another. creates polished user interface switching different elements like messages, panels, content containers.","code":""},{"path":"/reference/hide_and_show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smoothly Transition Between Two Elements ‚Äî hide_and_show","text":"","code":"hide_and_show(hide_id, show_id, fade_time = 1)"},{"path":"/reference/hide_and_show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smoothly Transition Between Two Elements ‚Äî hide_and_show","text":"hide_id Character string specifying ID element fade show_id Character string specifying ID element fade fade_time Numeric value specifying duration fade animation seconds (default: 1). total transition time twice length (default: 1 x 2).","code":""},{"path":"/reference/hide_and_show.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Smoothly Transition Between Two Elements ‚Äî hide_and_show","text":"transition occurs three steps: Ensures target element exists DIV hidden Fades currently visible element fade-completes, fades target element","code":""},{"path":"/reference/server_clean.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Up Server Session Resources ‚Äî server_clean","title":"Clean Up Server Session Resources ‚Äî server_clean","text":"function handles cleanup tasks Shiny session ends. ensures proper resource disposal logging session end closing database connections.","code":""},{"path":"/reference/server_clean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Up Server Session Resources ‚Äî server_clean","text":"","code":"server_clean(session, logger, zone = \"SURVEY\")"},{"path":"/reference/server_clean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Up Server Session Resources ‚Äî server_clean","text":"session Shiny session object logger logger object log_message method recording events zone Character string specifying logging zone (default: \"SURVEY\")","code":""},{"path":"/reference/server_clean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Up Server Session Resources ‚Äî server_clean","text":"None (called side effects)","code":""},{"path":"/reference/server_clean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean Up Server Session Resources ‚Äî server_clean","text":"function performs following cleanup tasks: Logs session end event Closes open database pool connections function called within server function Shiny application ensure proper resource management.","code":""},{"path":"/reference/server_clean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Up Server Session Resources ‚Äî server_clean","text":"","code":"if (FALSE) { # \\dontrun{ server <- function(input, output, session) {   # Setup logger   logger <- LoggerFactory$new()    # Register cleanup   server_clean(session, logger) } } # }"},{"path":"/reference/server_response.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey Response Table Output ‚Äî server_response","title":"Create Survey Response Table Output ‚Äî server_response","text":"function sets server-side logic displaying survey response data table Shiny application. handles rendering response table controls visibility based various reactive values.","code":""},{"path":"/reference/server_response.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey Response Table Output ‚Äî server_response","text":"","code":"server_response(output, rv, show_response = TRUE)"},{"path":"/reference/server_response.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey Response Table Output ‚Äî server_response","text":"output Shiny output object rv reactive values object containing: survey_completed - Boolean indicating survey completed loading - Boolean indicating loading state survey_responses - Data frame survey responses error_message - String containing error message show_response Boolean indicating whether show response table","code":""},{"path":"/reference/server_response.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Survey Response Table Output ‚Äî server_response","text":"None (called side effects)","code":""},{"path":"/reference/server_response.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Survey Response Table Output ‚Äî server_response","text":"function creates two reactive outputs: surveyResponseTable - DataTable showing survey responses showResponseTable - Controls visibility response table table shown : survey completed Data loading error messages show_response parameter TRUE","code":""},{"path":"/reference/server_response.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Survey Response Table Output ‚Äî server_response","text":"","code":"if (FALSE) { # \\dontrun{ server <- function(input, output, session) {   rv <- reactiveValues(     survey_completed = FALSE,     loading = FALSE,     survey_responses = data.frame(),     error_message = NULL   )    server_response(output, rv, show_response = TRUE) } } # }"},{"path":"/reference/server_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Server Components for Survey Application ‚Äî server_setup","title":"Setup Server Components for Survey Application ‚Äî server_setup","text":"Setup server-side components survey application setting logging database operations parent environment. Creates new logger instance attempts establish database operations, error handling database initialization failures.","code":""},{"path":"/reference/server_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Server Components for Survey Application ‚Äî server_setup","text":"","code":"server_setup(session, db_config, app_pool, survey_logger, db_ops)"},{"path":"/reference/server_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Server Components for Survey Application ‚Äî server_setup","text":"session Shiny session object containing session token db_config list containing database configuration elements: log_table: Name logging table database write_table: Name survey table database app_pool database connection pool object global environment survey_logger reference class object logging functionality db_ops reference class object database operations","code":""},{"path":"/reference/server_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Server Components for Survey Application ‚Äî server_setup","text":"function creates two objects parent environment: logger: initialized survey logger object db_ops: initialized database operations object (NULL initialization failed)","code":""},{"path":"/reference/server_setup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup Server Components for Survey Application ‚Äî server_setup","text":"","code":"if (FALSE) { # \\dontrun{ server_setup(   session = session,   db_config = db_config,   app_pool = app_pool,   survey_logger = survey_logger,   db_ops = db_ops ) # After running, 'logger' and 'db_ops' are available in the parent environment } # }"},{"path":"/reference/survey_css.html","id":null,"dir":"Reference","previous_headings":"","what":"Survey CSS with Theme Support ‚Äî survey_css","title":"Survey CSS with Theme Support ‚Äî survey_css","text":"Returns CSS code needed survey Shiny application light/dark theme support.","code":""},{"path":"/reference/survey_css.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey CSS with Theme Support ‚Äî survey_css","text":"","code":"survey_css(   primary = \"#003594\",   primary_foreground = \"#ffffff\",   background = \"#ffffff\",   foreground = \"#404040\",   mode = \"light\",   css_string = NULL )"},{"path":"/reference/survey_css.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Survey CSS with Theme Support ‚Äî survey_css","text":"primary Primary color hex format (default: \"#003594\") primary_foreground Text color primary elements (default: \"#ffffff\") background Background color (default: \"#ffffff\") foreground Main text color (default: \"#404040\") mode Color mode selection: \"light\" \"dark\" (default: \"light\") css_string Optional custom CSS string override default styles","code":""},{"path":"/reference/survey_css.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Survey CSS with Theme Support ‚Äî survey_css","text":"character string containing CSS code","code":""},{"path":"/reference/survey_css.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survey CSS with Theme Support ‚Äî survey_css","text":"","code":"if (FALSE) { # \\dontrun{ # Light mode tags$script(survey_css())  # Dark mode tags$script(survey_css(mode = \"dark\"))  # Custom dark mode colors tags$script(survey_css(   theme = \"dark\",   primary = \"#7289da\",   background = \"#2c2f33\" )) } # }"},{"path":"/reference/survey_logger.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny App Logger Class ‚Äî survey_logger","title":"Shiny App Logger Class ‚Äî survey_logger","text":"R6 class provides asynchronous logging functionality shiny app messages.","code":""},{"path":"/reference/survey_logger.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Shiny App Logger Class ‚Äî survey_logger","text":"R6 class object","code":""},{"path":"/reference/survey_logger.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shiny App Logger Class ‚Äî survey_logger","text":"class handles asynchronous logging shiny app messages PostgreSQL database. uses connection pooling futures efficient database operations. class maintains single logging table per instance handles database connections internally.","code":""},{"path":"/reference/survey_logger.html","id":"message-types","dir":"Reference","previous_headings":"","what":"Message Types","title":"Shiny App Logger Class ‚Äî survey_logger","text":"logger supports different message types displayed distinct visual styles: INFO Regular informational messages (displayed green) WARN Warning messages (displayed yellow) ERROR Error messages (displayed red)","code":""},{"path":"/reference/survey_logger.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public Fields","title":"Shiny App Logger Class ‚Äî survey_logger","text":"log_table character. Name database table logging session_id character. Unique identifier current session survey_name character. Name survey logged db_params list. Database connection parameters","code":""},{"path":"/reference/survey_logger.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Shiny App Logger Class ‚Äî survey_logger","text":"initialize(log_table, session_id, survey_name, db_config = NULL) Creates new logger instance log_table character. Name logging table session_id character. Unique session identifier survey_name character. Name survey db_config list. Optional database configuration parameters log_message(message, type = \"INFO\", zone = \"DEFAULT\") Logs message asynchronously appropriate visual styling message character. Message log type character. Type message (\"INFO\", \"WARN\", \"ERROR\") zone character. Zone identifier message categorization","code":""},{"path":"/reference/survey_logger.html","id":"public-fields-1","dir":"Reference","previous_headings":"","what":"Public fields","title":"Shiny App Logger Class ‚Äî survey_logger","text":"log_table Name database table logging session_id Unique identifier current session survey_name Name survey logged db_params List database connection parameters","code":""},{"path":[]},{"path":"/reference/survey_logger.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Shiny App Logger Class ‚Äî survey_logger","text":"survey_logger$new() survey_logger$log_message() survey_logger$clone()","code":""},{"path":"/reference/survey_logger.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Shiny App Logger Class ‚Äî survey_logger","text":"Initialize new survey logger instance","code":""},{"path":"/reference/survey_logger.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$new(log_table, session_id, survey_name)"},{"path":"/reference/survey_logger.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class ‚Äî survey_logger","text":"log_table character. Name logging table session_id character. Unique session identifier survey_name character. Name survey","code":""},{"path":"/reference/survey_logger.html","id":"method-log-message-","dir":"Reference","previous_headings":"","what":"Method log_message()","title":"Shiny App Logger Class ‚Äî survey_logger","text":"Log message asynchronously database appropriate visual styling","code":""},{"path":"/reference/survey_logger.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$log_message(message, type = \"INFO\", zone = \"DEFAULT\")"},{"path":"/reference/survey_logger.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class ‚Äî survey_logger","text":"message character. Message log type character. Type message (\"INFO\", \"WARN\", \"ERROR\") zone character. Zone identifier message categorization","code":""},{"path":"/reference/survey_logger.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Shiny App Logger Class ‚Äî survey_logger","text":"invisible(NULL)","code":""},{"path":"/reference/survey_logger.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Shiny App Logger Class ‚Äî survey_logger","text":"objects class cloneable method.","code":""},{"path":"/reference/survey_logger.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny App Logger Class ‚Äî survey_logger","text":"","code":"survey_logger$clone(deep = FALSE)"},{"path":"/reference/survey_logger.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny App Logger Class ‚Äî survey_logger","text":"deep Whether make deep clone.","code":""},{"path":"/reference/survey_logger.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny App Logger Class ‚Äî survey_logger","text":"","code":"if (FALSE) { # \\dontrun{ # Initialize logger logger <- survey_logger$new(   log_table = \"survey_logs\",   session_id = \"user123\",   survey_name = \"customer_feedback\" )  # Log different types of messages logger$log_message(\"Survey started\", \"INFO\", \"initialization\") logger$log_message(\"Missing optional field\", \"WARN\", \"validation\") logger$log_message(\"Required field empty\", \"ERROR\", \"validation\") } # }"},{"path":"/reference/survey_setup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Global Survey Environment and Database Connection ‚Äî survey_setup","title":"Setup Global Survey Environment and Database Connection ‚Äî survey_setup","text":"Setup global survey environment creating database connections, environment variables, future asynchronous processing plan. function: Validates database configuration parameters Sets required environment variables already present Configures optional Shiny settings Establishes global database connection pool Sets asynchronous processing using future package OS-specific configuration","code":""},{"path":"/reference/survey_setup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Global Survey Environment and Database Connection ‚Äî survey_setup","text":"","code":"survey_setup(db_config, shiny_config = NULL, workers = 2L)"},{"path":"/reference/survey_setup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Global Survey Environment and Database Connection ‚Äî survey_setup","text":"db_config list containing database configuration parameters: host: Database host address port: Database port number db_name: Name database user: Database username password: Database password write_table: Name table write operations shiny_config Optional list Shiny configuration parameters passed configure_shiny function. provided, settings applied database initialization. workers Number workers parallel processing. Default 3.","code":""},{"path":"/reference/survey_setup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Global Survey Environment and Database Connection ‚Äî survey_setup","text":"Invisibly returns database pool object. pool also assigned 'app_pool' global environment. Invisibly returns initialized database pool object","code":""},{"path":"/reference/survey_setup.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup Global Survey Environment and Database Connection ‚Äî survey_setup","text":"function performs several initialization steps: Validates write_table parameter non-empty string Checks required database configuration fields Sets environment variables (HOST, PORT, DB_NAME, USER, PASSWORD) present Applies optional Shiny configuration Creates global database connection pool exist Initializes future package asynchronous operations based OS Environment variables set already exist, preserving existing configurations.","code":""},{"path":"/reference/survey_setup.html","id":"database-pool","dir":"Reference","previous_headings":"","what":"Database Pool","title":"Setup Global Survey Environment and Database Connection ‚Äî survey_setup","text":"database pool created using db_pool_open function stored global environment 'app_pool'. pool already exists, recreated.","code":""},{"path":"/reference/survey_setup.html","id":"asynchronous-processing","dir":"Reference","previous_headings":"","what":"Asynchronous Processing","title":"Setup Global Survey Environment and Database Connection ‚Äî survey_setup","text":"function detects operating system sets appropriate future plan: Windows: Uses multisession macOS: Uses multicore supported, falls back multisession Linux: Uses multicore supported, falls back multisession","code":""},{"path":"/reference/survey_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Single Survey ‚Äî survey_single","title":"Create Single Survey ‚Äî survey_single","text":"Creates Shiny application single survey database integration. Responses stored PostgreSQL database configurable table name.","code":""},{"path":"/reference/survey_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Single Survey ‚Äî survey_single","text":"","code":"survey_single(   json,   show_response = TRUE,   theme = \"defaultV2\",   theme_color = \"#003594\",   theme_mode = \"light\",   shiny_config = list(host = \"0.0.0.0\", port = 3838),   db_config = list(host = Sys.getenv(\"HOST\"), port = as.numeric(Sys.getenv(\"PORT\")),     db_name = Sys.getenv(\"DB_NAME\"), user = Sys.getenv(\"USER\"), password =     Sys.getenv(\"PASSWORD\"), write_table = Sys.getenv(\"WRITE_TABLE\"), log_table =     Sys.getenv(\"LOG_TABLE\")),   cookie_expiration_days = 7 )"},{"path":"/reference/survey_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Single Survey ‚Äî survey_single","text":"json Survey JSON string object defining survey structure show_response Logical. Whether show responses submission (default: TRUE) theme Theme name SurveyJS: \"defaultV2\" \"modern\" (default: \"defaultV2\") theme_color Primary color hex code theme customization theme_mode Color mode selection: \"light\" \"dark\" (default: \"light\") shiny_config Optional list. Shiny configuration parameters passed configure_shiny() db_config List. Database connection parameters (defaults environment variables): host: Database host (default: HOST environment variable) port: Database port (default: PORT environment variable) db_name: Database name (default: DB_NAME environment variable) user: Database username (default: USER environment variable) password: Database password (default: PASSWORD environment variable) write_table: Table name write survey data (default: WRITE_TABLE environment variable) log_table: Table name write log messages (default: LOG_TABLE environment variable)","code":""},{"path":"/reference/survey_single.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Single Survey ‚Äî survey_single","text":"Shiny application object","code":""},{"path":"/reference/survey_single_js.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate JavaScript Code for Single Survey Integration ‚Äî survey_single_js","title":"Generate JavaScript Code for Single Survey Integration ‚Äî survey_single_js","text":"Returns JavaScript code needed initialize handle single survey Shiny application. JavaScript code sets event handlers survey completion, manages survey progress persistence cookies, enables communication survey Shiny.","code":""},{"path":"/reference/survey_single_js.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate JavaScript Code for Single Survey Integration ‚Äî survey_single_js","text":"","code":"survey_single_js(cookie_expiration_days = 7)"},{"path":"/reference/survey_single_js.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate JavaScript Code for Single Survey Integration ‚Äî survey_single_js","text":"cookie_expiration_days Integer specifying many days survey progress cookie persist. Defaults 7 days. cookie automatically deleted survey completed.","code":""},{"path":"/reference/survey_single_js.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate JavaScript Code for Single Survey Integration ‚Äî survey_single_js","text":"character string containing JavaScript code survey initialization management. code includes functionality : Survey progress persistence cookies Automatic progress saving page changes value updates Survey completion handling data transmission Shiny Error handling user feedback","code":""},{"path":"/reference/survey_single_js.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate JavaScript Code for Single Survey Integration ‚Äî survey_single_js","text":"","code":"# Generate JavaScript with default 7-day cookie expiration js_code <- survey_single_js() #> Error in survey_single_js(): could not find function \"survey_single_js\"  # Generate JavaScript with 30-day cookie expiration js_code <- survey_single_js(cookie_expiration_days = 30) #> Error in survey_single_js(cookie_expiration_days = 30): could not find function \"survey_single_js\""},{"path":"/reference/survey_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey UI with CSS and Message Components ‚Äî survey_ui","title":"Create Survey UI with CSS and Message Components ‚Äî survey_ui","text":"Create Survey UI CSS Message Components","code":""},{"path":"/reference/survey_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey UI with CSS and Message Components ‚Äî survey_ui","text":"","code":"survey_ui(   id = \"surveyContainer\",   theme = \"defaultV2\",   primary = \"#003594\",   mode = \"light\",   cookie_expiration_days = 7 )"},{"path":"/reference/survey_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey UI with CSS and Message Components ‚Äî survey_ui","text":"id Optional id survey div container (default \"surveyContainer\") theme Theme name (\"defaultV2\" \"modern\") primary Primary color hex code (optional) mode Color mode (\"light\" \"dark\")","code":""},{"path":"/reference/survey_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Survey UI with CSS and Message Components ‚Äî survey_ui","text":"tagList containing survey dependencies container","code":""},{"path":"/reference/survey_ui_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Survey UI Wrapper ‚Äî survey_ui_wrapper","title":"Create Survey UI Wrapper ‚Äî survey_ui_wrapper","text":"Creates Shiny UI wrapper displaying survey optional response table. UI includes loading spinner conditional panels based survey state.","code":""},{"path":"/reference/survey_ui_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Survey UI Wrapper ‚Äî survey_ui_wrapper","text":"","code":"survey_ui_wrapper(   theme = NULL,   theme_color = \"#000000\",   theme_mode = \"light\",   cookie_expiration_days = 7 )"},{"path":"/reference/survey_ui_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Survey UI Wrapper ‚Äî survey_ui_wrapper","text":"theme theme configuration styling survey theme_color Primary color used UI elements like loading spinner theme_mode theme mode (e.g., 'light' 'dark')","code":""},{"path":"/reference/survey_ui_wrapper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Survey UI Wrapper ‚Äî survey_ui_wrapper","text":"Shiny UI definition","code":""}]
