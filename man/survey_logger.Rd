% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logger.R
\name{survey_logger}
\alias{survey_logger}
\title{Shiny App Logger Class}
\format{
An \link[R6:R6Class]{R6} class object.
}
\description{
Creates a new logger instance for recording application messages asynchronously
to a PostgreSQL database with visual console feedback.
}
\details{
An R6 class that provides asynchronous logging functionality for Shiny
application messages. This class efficiently handles logging to a PostgreSQL
database using connection pooling and futures for non-blocking database operations.
}
\section{Message Types}{

Supported message types with distinct visual styles:
\itemize{
\item \code{INFO}: Regular informational messages (green)
\item \code{WARN}: Warning messages (yellow)
\item \code{ERROR}: Error messages (red)
}
}

\section{Public Fields}{

\itemize{
\item \code{log_table}: Character. Database table name for logging
\item \code{session_id}: Character. Unique identifier for current session
\item \code{survey_name}: Character. Name of the survey being logged
\item \code{db_params}: List. Database connection parameters
\item \code{suppress_logs}: Logical. Whether to suppress console output
}
}

\examples{
\dontrun{
# Initialize logger with console output
logger <- survey_logger$new(
  log_table = "survey_app_logs",
  session_id = "user123",
  survey_name = "customer_feedback"
)

# Log different types of messages
logger$log_message("Survey started", "INFO", "initialization")
logger$log_message("Missing optional field", "WARN", "validation")
logger$log_message("Database error", "ERROR", "data")
}

}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{log_table}}{Character string specifying the name of the PostgreSQL table where logs will be stored.}

\item{\code{session_id}}{Character string containing a unique identifier for the current Shiny session.}

\item{\code{survey_name}}{Character string identifying which survey is being logged.}

\item{\code{db_params}}{List containing PostgreSQL connection parameters including host, port, database name,
username and password.}

\item{\code{suppress_logs}}{Logical flag indicating whether to suppress console output messages. When TRUE,
messages are only logged to the database without console feedback.
Initialize a new survey logger instance

Creates a new logger instance and ensures the logging table exists in the database.
Connection parameters are read from environment variables if not explicitly provided.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-survey_logger-new}{\code{survey_logger$new()}}
\item \href{#method-survey_logger-log_message}{\code{survey_logger$log_message()}}
\item \href{#method-survey_logger-clone}{\code{survey_logger$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-survey_logger-new"></a>}}
\if{latex}{\out{\hypertarget{method-survey_logger-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{survey_logger$new(log_table, session_id, survey_name, suppress_logs = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{log_table}}{Character string specifying the name of the logging table}

\item{\code{session_id}}{Character string containing a unique session identifier}

\item{\code{survey_name}}{Character string identifying the survey}

\item{\code{suppress_logs}}{Logical flag to suppress console output. Default: FALSE}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new survey_logger instance (invisible)
Log a message asynchronously

Records a message to the PostgreSQL database asynchronously using futures and
provides visual console feedback based on message type. Messages are stored with
timestamp, session ID, and zone information.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-survey_logger-log_message"></a>}}
\if{latex}{\out{\hypertarget{method-survey_logger-log_message}{}}}
\subsection{Method \code{log_message()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{survey_logger$log_message(message, type = "INFO", zone = "DEFAULT")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{message}}{Character string containing the message to log}

\item{\code{type}}{Character string specifying message type. Must be one of:
\itemize{
\item "INFO": Regular informational messages (green)
\item "WARN": Warning messages (yellow)
\item "ERROR": Error messages (red)
Default: "INFO"
}}

\item{\code{zone}}{Character string identifying the logging zone for message
categorization. Default: "DEFAULT"}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL invisibly. Operation happens asynchronously.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-survey_logger-clone"></a>}}
\if{latex}{\out{\hypertarget{method-survey_logger-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{survey_logger$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
