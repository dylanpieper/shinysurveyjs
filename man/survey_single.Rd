% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/server.R
\name{survey_single}
\alias{survey_single}
\title{Deploy a Survey Shiny Application}
\usage{
survey_single(
  json = NULL,
  list = NULL,
  show_response = FALSE,
  theme = "defaultV2",
  theme_color = "#003594",
  theme_mode = "light",
  shiny_config = list(host = "0.0.0.0", port = 3838),
  db_config = list(host = Sys.getenv("HOST"), port = as.numeric(Sys.getenv("PORT")),
    db_name = Sys.getenv("DB_NAME"), user = Sys.getenv("USER"), password =
    Sys.getenv("PASSWORD"), write_table = Sys.getenv("WRITE_TABLE"), log_table =
    Sys.getenv("LOG_TABLE")),
  dynamic_config = NULL,
  cookie_expiration_days = 7,
  custom_css = NULL,
  suppress_logs = FALSE
)
}
\arguments{
\item{json}{String. JSON survey definition or object.}

\item{list}{List. Survey structure to convert to JSON.}

\item{show_response}{Logical. Display responses in a data.table after submission.
Default: \code{FALSE}.}

\item{theme}{String. SurveyJS theme, either "defaultV2" or "modern".
Default: "defaultV2".}

\item{theme_color}{String. Hex color code for primary theme customization.}

\item{theme_mode}{String. Color mode, either "light" or "dark".
Default: "light".}

\item{shiny_config}{List. Optional Shiny configuration parameters.}

\item{db_config}{List. Database connection parameters. If not specified,
values are read from environment variables:
\itemize{
\item \code{host}: Database host (env: HOST)
\item \code{port}: Database port (env: PORT)
\item \code{db_name}: Database name (env: DB_NAME)
\item \code{user}: Database username (env: USER)
\item \code{password}: Database password (env: PASSWORD)
\item \code{write_table}: Survey data table name (env: WRITE_TABLE)
\item \code{log_table}: Log messages table name (env: LOG_TABLE)
}}

\item{dynamic_config}{List. Configuration for dynamic fields. Supports three types:
\subsection{Choice Configuration}{
Populates dropdown or radio button choices from database tables:
* \code{config_type}: Set to "choice"
* \code{table_name}: Database table to populate choices from
* \code{config_col}: Column containing choice text
* \code{display_col}: Optional column for display text

\if{html}{\out{<div class="sourceCode">}}\preformatted{For dependent fields:
* `parent_table_name`: Parent table for dependency chain
* `parent_id_col`: Column linking to parent table
}\if{html}{\out{</div>}}

}
\subsection{Parameter Configuration}{
Handles URL query parameters and hidden fields:
* \code{config_type}: Set to "param"
* \code{table_name}: Database table with valid parameters
* \code{config_col}: Column matching URL parameter name
* \code{display_col}: Optional column for display text
}
\subsection{Unique Value Configuration}{
Validates unique entries against existing database records:
* \code{config_type}: Set to "unique"
* \code{config_col}: Column to check for uniqueness
* \code{result}: Action on duplicate ("warn" or "stop")
* \code{result_field}: Survey field for warning message (should be hidden)
}}

\item{cookie_expiration_days}{Numeric. Number of days to retain survey cookies.
Default: 7.}

\item{custom_css}{String. Custom CSS rules to append to the theme.}

\item{suppress_logs}{Logical. Suppress console log messages. Default: \code{FALSE}.}
}
\value{
A Shiny application object
}
\description{
Creates and deploys a Shiny application for a survey using SurveyJS
(\url{https://surveyjs.io}) with PostgreSQL database integration. The application handles
survey data collection, dynamic fields, and asynchronous logging through a future plan.
}
\examples{
\dontrun{
# Choice configuration example
dynamic_config <- list(
  list(
    config_type = "choice",
    table_name = "packages",
    config_col = "name"
  )
)

# Parameter configuration example
dynamic_config <- list(
  list(
    config_type = "param",
    table_name = "sources",
    config_col = "source",
    display_col = "display_text"
  )
)

# Unique value configuration example
dynamic_config <- list(
  list(
    config_type = "unique",
    config_col = "title",
    result = "warn",
    result_field = "warning_message"
  )
)
}

}
